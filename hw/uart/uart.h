// Automatically generated by https://github.com/DualTachyon/rk3588-svd

/* Copyright 2024 Dual Tachyon
 * https://github.com/DualTachyon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

#ifndef RK3588_UART_H
#define RK3588_UART_H

#include <stdint.h>

#define UART_RBR_DATA_INPUT_SHIFT                              0U
#define UART_RBR_DATA_INPUT_WIDTH                              8U
#define UART_RBR_DATA_INPUT_MASK                               (((1U << UART_RBR_DATA_INPUT_WIDTH) - 1U) << UART_RBR_DATA_INPUT_SHIFT)
#define UART_RBR_GET_DATA_INPUT(v)                             (((v) & UART_RBR_DATA_INPUT_MASK) >> UART_RBR_DATA_INPUT_SHIFT)
#define UART_RBR_SET_DATA_INPUT(v)                             (((uint32_t)(v) << UART_RBR_DATA_INPUT_SHIFT) & UART_RBR_DATA_INPUT_MASK)

#define UART_DLL_BAUD_RATE_DIVISOR_L_SHIFT                     0U
#define UART_DLL_BAUD_RATE_DIVISOR_L_WIDTH                     8U
#define UART_DLL_BAUD_RATE_DIVISOR_L_MASK                      (((1U << UART_DLL_BAUD_RATE_DIVISOR_L_WIDTH) - 1U) << UART_DLL_BAUD_RATE_DIVISOR_L_SHIFT)
#define UART_DLL_GET_BAUD_RATE_DIVISOR_L(v)                    (((v) & UART_DLL_BAUD_RATE_DIVISOR_L_MASK) >> UART_DLL_BAUD_RATE_DIVISOR_L_SHIFT)
#define UART_DLL_SET_BAUD_RATE_DIVISOR_L(v)                    (((uint32_t)(v) << UART_DLL_BAUD_RATE_DIVISOR_L_SHIFT) & UART_DLL_BAUD_RATE_DIVISOR_L_MASK)

#define UART_THR_DATA_OUTPUT_SHIFT                             0U
#define UART_THR_DATA_OUTPUT_WIDTH                             8U
#define UART_THR_DATA_OUTPUT_MASK                              (((1U << UART_THR_DATA_OUTPUT_WIDTH) - 1U) << UART_THR_DATA_OUTPUT_SHIFT)
#define UART_THR_GET_DATA_OUTPUT(v)                            (((v) & UART_THR_DATA_OUTPUT_MASK) >> UART_THR_DATA_OUTPUT_SHIFT)
#define UART_THR_SET_DATA_OUTPUT(v)                            (((uint32_t)(v) << UART_THR_DATA_OUTPUT_SHIFT) & UART_THR_DATA_OUTPUT_MASK)

#define UART_DLH_BAUD_RATE_DIVISOR_H_SHIFT                     0U
#define UART_DLH_BAUD_RATE_DIVISOR_H_WIDTH                     8U
#define UART_DLH_BAUD_RATE_DIVISOR_H_MASK                      (((1U << UART_DLH_BAUD_RATE_DIVISOR_H_WIDTH) - 1U) << UART_DLH_BAUD_RATE_DIVISOR_H_SHIFT)
#define UART_DLH_GET_BAUD_RATE_DIVISOR_H(v)                    (((v) & UART_DLH_BAUD_RATE_DIVISOR_H_MASK) >> UART_DLH_BAUD_RATE_DIVISOR_H_SHIFT)
#define UART_DLH_SET_BAUD_RATE_DIVISOR_H(v)                    (((uint32_t)(v) << UART_DLH_BAUD_RATE_DIVISOR_H_SHIFT) & UART_DLH_BAUD_RATE_DIVISOR_H_MASK)

#define UART_IER_PROG_THRE_INT_EN_SHIFT                        7U
#define UART_IER_PROG_THRE_INT_EN_WIDTH                        1U
#define UART_IER_PROG_THRE_INT_EN_MASK                         (((1U << UART_IER_PROG_THRE_INT_EN_WIDTH) - 1U) << UART_IER_PROG_THRE_INT_EN_SHIFT)
#define UART_IER_GET_PROG_THRE_INT_EN(v)                       (((v) & UART_IER_PROG_THRE_INT_EN_MASK) >> UART_IER_PROG_THRE_INT_EN_SHIFT)
#define UART_IER_SET_PROG_THRE_INT_EN(v)                       (((uint32_t)(v) << UART_IER_PROG_THRE_INT_EN_SHIFT) & UART_IER_PROG_THRE_INT_EN_MASK)
#define UART_IER_PROG_THRE_INT_EN_VALUE_DISABLED               0x0U
#define UART_IER_PROG_THRE_INT_EN_VALUE_ENABLED                0x1U

#define UART_IER_MODEM_STATUS_INT_EN_SHIFT                     3U
#define UART_IER_MODEM_STATUS_INT_EN_WIDTH                     1U
#define UART_IER_MODEM_STATUS_INT_EN_MASK                      (((1U << UART_IER_MODEM_STATUS_INT_EN_WIDTH) - 1U) << UART_IER_MODEM_STATUS_INT_EN_SHIFT)
#define UART_IER_GET_MODEM_STATUS_INT_EN(v)                    (((v) & UART_IER_MODEM_STATUS_INT_EN_MASK) >> UART_IER_MODEM_STATUS_INT_EN_SHIFT)
#define UART_IER_SET_MODEM_STATUS_INT_EN(v)                    (((uint32_t)(v) << UART_IER_MODEM_STATUS_INT_EN_SHIFT) & UART_IER_MODEM_STATUS_INT_EN_MASK)
#define UART_IER_MODEM_STATUS_INT_EN_VALUE_DISABLED            0x0U
#define UART_IER_MODEM_STATUS_INT_EN_VALUE_ENABLED             0x1U

#define UART_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT              2U
#define UART_IER_RECEIVE_LINE_STATUS_INT_EN_WIDTH              1U
#define UART_IER_RECEIVE_LINE_STATUS_INT_EN_MASK               (((1U << UART_IER_RECEIVE_LINE_STATUS_INT_EN_WIDTH) - 1U) << UART_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT)
#define UART_IER_GET_RECEIVE_LINE_STATUS_INT_EN(v)             (((v) & UART_IER_RECEIVE_LINE_STATUS_INT_EN_MASK) >> UART_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT)
#define UART_IER_SET_RECEIVE_LINE_STATUS_INT_EN(v)             (((uint32_t)(v) << UART_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT) & UART_IER_RECEIVE_LINE_STATUS_INT_EN_MASK)
#define UART_IER_RECEIVE_LINE_STATUS_INT_EN_VALUE_DISABLED     0x0U
#define UART_IER_RECEIVE_LINE_STATUS_INT_EN_VALUE_ENABLED      0x1U

#define UART_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT                 1U
#define UART_IER_TRANS_HOLD_EMPTY_INT_EN_WIDTH                 1U
#define UART_IER_TRANS_HOLD_EMPTY_INT_EN_MASK                  (((1U << UART_IER_TRANS_HOLD_EMPTY_INT_EN_WIDTH) - 1U) << UART_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT)
#define UART_IER_GET_TRANS_HOLD_EMPTY_INT_EN(v)                (((v) & UART_IER_TRANS_HOLD_EMPTY_INT_EN_MASK) >> UART_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT)
#define UART_IER_SET_TRANS_HOLD_EMPTY_INT_EN(v)                (((uint32_t)(v) << UART_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT) & UART_IER_TRANS_HOLD_EMPTY_INT_EN_MASK)
#define UART_IER_TRANS_HOLD_EMPTY_INT_EN_VALUE_DISABLED        0x0U
#define UART_IER_TRANS_HOLD_EMPTY_INT_EN_VALUE_ENABLED         0x1U

#define UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT           0U
#define UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_WIDTH           1U
#define UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK            (((1U << UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_WIDTH) - 1U) << UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT)
#define UART_IER_GET_RECEIVE_DATA_AVAILABLE_INT_EN(v)          (((v) & UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK) >> UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT)
#define UART_IER_SET_RECEIVE_DATA_AVAILABLE_INT_EN(v)          (((uint32_t)(v) << UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT) & UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK)
#define UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_VALUE_DISABLED  0x0U
#define UART_IER_RECEIVE_DATA_AVAILABLE_INT_EN_VALUE_ENABLED   0x1U

#define UART_FCR_RCVR_TRIGGER_SHIFT                            6U
#define UART_FCR_RCVR_TRIGGER_WIDTH                            2U
#define UART_FCR_RCVR_TRIGGER_MASK                             (((1U << UART_FCR_RCVR_TRIGGER_WIDTH) - 1U) << UART_FCR_RCVR_TRIGGER_SHIFT)
#define UART_FCR_GET_RCVR_TRIGGER(v)                           (((v) & UART_FCR_RCVR_TRIGGER_MASK) >> UART_FCR_RCVR_TRIGGER_SHIFT)
#define UART_FCR_SET_RCVR_TRIGGER(v)                           (((uint32_t)(v) << UART_FCR_RCVR_TRIGGER_SHIFT) & UART_FCR_RCVR_TRIGGER_MASK)
#define UART_FCR_RCVR_TRIGGER_VALUE_1CHAR                      0x0U
#define UART_FCR_RCVR_TRIGGER_VALUE_QUARTER_FULL               0x1U
#define UART_FCR_RCVR_TRIGGER_VALUE_HALF_FULL                  0x2U
#define UART_FCR_RCVR_TRIGGER_VALUE_ALMOST_FULL                0x3U

#define UART_FCR_TX_EMPTY_TRIGGER_SHIFT                        4U
#define UART_FCR_TX_EMPTY_TRIGGER_WIDTH                        2U
#define UART_FCR_TX_EMPTY_TRIGGER_MASK                         (((1U << UART_FCR_TX_EMPTY_TRIGGER_WIDTH) - 1U) << UART_FCR_TX_EMPTY_TRIGGER_SHIFT)
#define UART_FCR_GET_TX_EMPTY_TRIGGER(v)                       (((v) & UART_FCR_TX_EMPTY_TRIGGER_MASK) >> UART_FCR_TX_EMPTY_TRIGGER_SHIFT)
#define UART_FCR_SET_TX_EMPTY_TRIGGER(v)                       (((uint32_t)(v) << UART_FCR_TX_EMPTY_TRIGGER_SHIFT) & UART_FCR_TX_EMPTY_TRIGGER_MASK)
#define UART_FCR_TX_EMPTY_TRIGGER_VALUE_EMPTY                  0x0U
#define UART_FCR_TX_EMPTY_TRIGGER_VALUE_2CHARS                 0x1U
#define UART_FCR_TX_EMPTY_TRIGGER_VALUE_QUARTER_FULL           0x2U
#define UART_FCR_TX_EMPTY_TRIGGER_VALUE_HALF_FULL              0x3U

#define UART_FCR_DMA_MODE_SHIFT                                3U
#define UART_FCR_DMA_MODE_WIDTH                                1U
#define UART_FCR_DMA_MODE_MASK                                 (((1U << UART_FCR_DMA_MODE_WIDTH) - 1U) << UART_FCR_DMA_MODE_SHIFT)
#define UART_FCR_GET_DMA_MODE(v)                               (((v) & UART_FCR_DMA_MODE_MASK) >> UART_FCR_DMA_MODE_SHIFT)
#define UART_FCR_SET_DMA_MODE(v)                               (((uint32_t)(v) << UART_FCR_DMA_MODE_SHIFT) & UART_FCR_DMA_MODE_MASK)
#define UART_FCR_DMA_MODE_VALUE_MODE_0                         0x0U
#define UART_FCR_DMA_MODE_VALUE_MODE_1                         0x1U

#define UART_FCR_XMIT_FIFO_RESET_SHIFT                         2U
#define UART_FCR_XMIT_FIFO_RESET_WIDTH                         1U
#define UART_FCR_XMIT_FIFO_RESET_MASK                          (((1U << UART_FCR_XMIT_FIFO_RESET_WIDTH) - 1U) << UART_FCR_XMIT_FIFO_RESET_SHIFT)
#define UART_FCR_GET_XMIT_FIFO_RESET(v)                        (((v) & UART_FCR_XMIT_FIFO_RESET_MASK) >> UART_FCR_XMIT_FIFO_RESET_SHIFT)
#define UART_FCR_SET_XMIT_FIFO_RESET(v)                        (((uint32_t)(v) << UART_FCR_XMIT_FIFO_RESET_SHIFT) & UART_FCR_XMIT_FIFO_RESET_MASK)

#define UART_FCR_RCVR_FIFO_RESET_SHIFT                         1U
#define UART_FCR_RCVR_FIFO_RESET_WIDTH                         1U
#define UART_FCR_RCVR_FIFO_RESET_MASK                          (((1U << UART_FCR_RCVR_FIFO_RESET_WIDTH) - 1U) << UART_FCR_RCVR_FIFO_RESET_SHIFT)
#define UART_FCR_GET_RCVR_FIFO_RESET(v)                        (((v) & UART_FCR_RCVR_FIFO_RESET_MASK) >> UART_FCR_RCVR_FIFO_RESET_SHIFT)
#define UART_FCR_SET_RCVR_FIFO_RESET(v)                        (((uint32_t)(v) << UART_FCR_RCVR_FIFO_RESET_SHIFT) & UART_FCR_RCVR_FIFO_RESET_MASK)

#define UART_FCR_FIFO_EN_SHIFT                                 0U
#define UART_FCR_FIFO_EN_WIDTH                                 1U
#define UART_FCR_FIFO_EN_MASK                                  (((1U << UART_FCR_FIFO_EN_WIDTH) - 1U) << UART_FCR_FIFO_EN_SHIFT)
#define UART_FCR_GET_FIFO_EN(v)                                (((v) & UART_FCR_FIFO_EN_MASK) >> UART_FCR_FIFO_EN_SHIFT)
#define UART_FCR_SET_FIFO_EN(v)                                (((uint32_t)(v) << UART_FCR_FIFO_EN_SHIFT) & UART_FCR_FIFO_EN_MASK)

#define UART_IIR_FIFOS_EN_SHIFT                                6U
#define UART_IIR_FIFOS_EN_WIDTH                                2U
#define UART_IIR_FIFOS_EN_MASK                                 (((1U << UART_IIR_FIFOS_EN_WIDTH) - 1U) << UART_IIR_FIFOS_EN_SHIFT)
#define UART_IIR_GET_FIFOS_EN(v)                               (((v) & UART_IIR_FIFOS_EN_MASK) >> UART_IIR_FIFOS_EN_SHIFT)
#define UART_IIR_SET_FIFOS_EN(v)                               (((uint32_t)(v) << UART_IIR_FIFOS_EN_SHIFT) & UART_IIR_FIFOS_EN_MASK)
#define UART_IIR_FIFOS_EN_VALUE_DISABLED                       0x0U
#define UART_IIR_FIFOS_EN_VALUE_ENABLED                        0x3U

#define UART_IIR_INT_ID_SHIFT                                  0U
#define UART_IIR_INT_ID_WIDTH                                  4U
#define UART_IIR_INT_ID_MASK                                   (((1U << UART_IIR_INT_ID_WIDTH) - 1U) << UART_IIR_INT_ID_SHIFT)
#define UART_IIR_GET_INT_ID(v)                                 (((v) & UART_IIR_INT_ID_MASK) >> UART_IIR_INT_ID_SHIFT)
#define UART_IIR_SET_INT_ID(v)                                 (((uint32_t)(v) << UART_IIR_INT_ID_SHIFT) & UART_IIR_INT_ID_MASK)
#define UART_IIR_INT_ID_VALUE_MODEM_STATUS                     0x0U
#define UART_IIR_INT_ID_VALUE_NO_INTERRUPT_PENDING             0x1U
#define UART_IIR_INT_ID_VALUE_THR_EMPTY                        0x2U
#define UART_IIR_INT_ID_VALUE_RECEIVED_DATA_AVAILABLE          0x4U
#define UART_IIR_INT_ID_VALUE_RECEIVER_LINE_STATUS             0x6U
#define UART_IIR_INT_ID_VALUE_BUSY_DETECT                      0x7U
#define UART_IIR_INT_ID_VALUE_CHARACTER_TIMEOUT                0xCU

#define UART_LCR_DIV_LAT_ACCESS_SHIFT                          7U
#define UART_LCR_DIV_LAT_ACCESS_WIDTH                          1U
#define UART_LCR_DIV_LAT_ACCESS_MASK                           (((1U << UART_LCR_DIV_LAT_ACCESS_WIDTH) - 1U) << UART_LCR_DIV_LAT_ACCESS_SHIFT)
#define UART_LCR_GET_DIV_LAT_ACCESS(v)                         (((v) & UART_LCR_DIV_LAT_ACCESS_MASK) >> UART_LCR_DIV_LAT_ACCESS_SHIFT)
#define UART_LCR_SET_DIV_LAT_ACCESS(v)                         (((uint32_t)(v) << UART_LCR_DIV_LAT_ACCESS_SHIFT) & UART_LCR_DIV_LAT_ACCESS_MASK)
#define UART_LCR_DIV_LAT_ACCESS_VALUE_ENABLE                   0x1U
#define UART_LCR_DIV_LAT_ACCESS_VALUE_DISABLE                  0x0U

#define UART_LCR_BREAK_CTRL_SHIFT                              6U
#define UART_LCR_BREAK_CTRL_WIDTH                              1U
#define UART_LCR_BREAK_CTRL_MASK                               (((1U << UART_LCR_BREAK_CTRL_WIDTH) - 1U) << UART_LCR_BREAK_CTRL_SHIFT)
#define UART_LCR_GET_BREAK_CTRL(v)                             (((v) & UART_LCR_BREAK_CTRL_MASK) >> UART_LCR_BREAK_CTRL_SHIFT)
#define UART_LCR_SET_BREAK_CTRL(v)                             (((uint32_t)(v) << UART_LCR_BREAK_CTRL_SHIFT) & UART_LCR_BREAK_CTRL_MASK)

#define UART_LCR_STICK_PARITY_SHIFT                            5U
#define UART_LCR_STICK_PARITY_WIDTH                            1U
#define UART_LCR_STICK_PARITY_MASK                             (((1U << UART_LCR_STICK_PARITY_WIDTH) - 1U) << UART_LCR_STICK_PARITY_SHIFT)
#define UART_LCR_GET_STICK_PARITY(v)                           (((v) & UART_LCR_STICK_PARITY_MASK) >> UART_LCR_STICK_PARITY_SHIFT)
#define UART_LCR_SET_STICK_PARITY(v)                           (((uint32_t)(v) << UART_LCR_STICK_PARITY_SHIFT) & UART_LCR_STICK_PARITY_MASK)

#define UART_LCR_EVEN_PARITY_SEL_SHIFT                         4U
#define UART_LCR_EVEN_PARITY_SEL_WIDTH                         1U
#define UART_LCR_EVEN_PARITY_SEL_MASK                          (((1U << UART_LCR_EVEN_PARITY_SEL_WIDTH) - 1U) << UART_LCR_EVEN_PARITY_SEL_SHIFT)
#define UART_LCR_GET_EVEN_PARITY_SEL(v)                        (((v) & UART_LCR_EVEN_PARITY_SEL_MASK) >> UART_LCR_EVEN_PARITY_SEL_SHIFT)
#define UART_LCR_SET_EVEN_PARITY_SEL(v)                        (((uint32_t)(v) << UART_LCR_EVEN_PARITY_SEL_SHIFT) & UART_LCR_EVEN_PARITY_SEL_MASK)

#define UART_LCR_PARITY_EN_SHIFT                               3U
#define UART_LCR_PARITY_EN_WIDTH                               1U
#define UART_LCR_PARITY_EN_MASK                                (((1U << UART_LCR_PARITY_EN_WIDTH) - 1U) << UART_LCR_PARITY_EN_SHIFT)
#define UART_LCR_GET_PARITY_EN(v)                              (((v) & UART_LCR_PARITY_EN_MASK) >> UART_LCR_PARITY_EN_SHIFT)
#define UART_LCR_SET_PARITY_EN(v)                              (((uint32_t)(v) << UART_LCR_PARITY_EN_SHIFT) & UART_LCR_PARITY_EN_MASK)
#define UART_LCR_PARITY_EN_VALUE_DISABLED                      0x0U
#define UART_LCR_PARITY_EN_VALUE_ENABLED                       0x1U

#define UART_LCR_STOP_BITS_NUM_SHIFT                           2U
#define UART_LCR_STOP_BITS_NUM_WIDTH                           1U
#define UART_LCR_STOP_BITS_NUM_MASK                            (((1U << UART_LCR_STOP_BITS_NUM_WIDTH) - 1U) << UART_LCR_STOP_BITS_NUM_SHIFT)
#define UART_LCR_GET_STOP_BITS_NUM(v)                          (((v) & UART_LCR_STOP_BITS_NUM_MASK) >> UART_LCR_STOP_BITS_NUM_SHIFT)
#define UART_LCR_SET_STOP_BITS_NUM(v)                          (((uint32_t)(v) << UART_LCR_STOP_BITS_NUM_SHIFT) & UART_LCR_STOP_BITS_NUM_MASK)
#define UART_LCR_STOP_BITS_NUM_VALUE_1_STOP_BIT                0x0U
#define UART_LCR_STOP_BITS_NUM_VALUE_1_5_STOP_BITS             0x1U

#define UART_LCR_DATA_LENGTH_SEL_SHIFT                         0U
#define UART_LCR_DATA_LENGTH_SEL_WIDTH                         2U
#define UART_LCR_DATA_LENGTH_SEL_MASK                          (((1U << UART_LCR_DATA_LENGTH_SEL_WIDTH) - 1U) << UART_LCR_DATA_LENGTH_SEL_SHIFT)
#define UART_LCR_GET_DATA_LENGTH_SEL(v)                        (((v) & UART_LCR_DATA_LENGTH_SEL_MASK) >> UART_LCR_DATA_LENGTH_SEL_SHIFT)
#define UART_LCR_SET_DATA_LENGTH_SEL(v)                        (((uint32_t)(v) << UART_LCR_DATA_LENGTH_SEL_SHIFT) & UART_LCR_DATA_LENGTH_SEL_MASK)
#define UART_LCR_DATA_LENGTH_SEL_VALUE_5BITS                   0x0U
#define UART_LCR_DATA_LENGTH_SEL_VALUE_6BITS                   0x1U
#define UART_LCR_DATA_LENGTH_SEL_VALUE_7BITS                   0x2U
#define UART_LCR_DATA_LENGTH_SEL_VALUE_8BITS                   0x3U

#define UART_MCR_AUTO_FLOW_CTRL_EN_SHIFT                       5U
#define UART_MCR_AUTO_FLOW_CTRL_EN_WIDTH                       1U
#define UART_MCR_AUTO_FLOW_CTRL_EN_MASK                        (((1U << UART_MCR_AUTO_FLOW_CTRL_EN_WIDTH) - 1U) << UART_MCR_AUTO_FLOW_CTRL_EN_SHIFT)
#define UART_MCR_GET_AUTO_FLOW_CTRL_EN(v)                      (((v) & UART_MCR_AUTO_FLOW_CTRL_EN_MASK) >> UART_MCR_AUTO_FLOW_CTRL_EN_SHIFT)
#define UART_MCR_SET_AUTO_FLOW_CTRL_EN(v)                      (((uint32_t)(v) << UART_MCR_AUTO_FLOW_CTRL_EN_SHIFT) & UART_MCR_AUTO_FLOW_CTRL_EN_MASK)
#define UART_MCR_AUTO_FLOW_CTRL_EN_VALUE_DISABLED              0x0U
#define UART_MCR_AUTO_FLOW_CTRL_EN_VALUE_ENABLED               0x1U

#define UART_MCR_LOOPBACK_SHIFT                                4U
#define UART_MCR_LOOPBACK_WIDTH                                1U
#define UART_MCR_LOOPBACK_MASK                                 (((1U << UART_MCR_LOOPBACK_WIDTH) - 1U) << UART_MCR_LOOPBACK_SHIFT)
#define UART_MCR_GET_LOOPBACK(v)                               (((v) & UART_MCR_LOOPBACK_MASK) >> UART_MCR_LOOPBACK_SHIFT)
#define UART_MCR_SET_LOOPBACK(v)                               (((uint32_t)(v) << UART_MCR_LOOPBACK_SHIFT) & UART_MCR_LOOPBACK_MASK)

#define UART_MCR_OUT2_SHIFT                                    3U
#define UART_MCR_OUT2_WIDTH                                    1U
#define UART_MCR_OUT2_MASK                                     (((1U << UART_MCR_OUT2_WIDTH) - 1U) << UART_MCR_OUT2_SHIFT)
#define UART_MCR_GET_OUT2(v)                                   (((v) & UART_MCR_OUT2_MASK) >> UART_MCR_OUT2_SHIFT)
#define UART_MCR_SET_OUT2(v)                                   (((uint32_t)(v) << UART_MCR_OUT2_SHIFT) & UART_MCR_OUT2_MASK)
#define UART_MCR_OUT2_VALUE_DEASSERTED                         0x0U
#define UART_MCR_OUT2_VALUE_ASSERTED                           0x1U

#define UART_MCR_OUT1_SHIFT                                    2U
#define UART_MCR_OUT1_WIDTH                                    1U
#define UART_MCR_OUT1_MASK                                     (((1U << UART_MCR_OUT1_WIDTH) - 1U) << UART_MCR_OUT1_SHIFT)
#define UART_MCR_GET_OUT1(v)                                   (((v) & UART_MCR_OUT1_MASK) >> UART_MCR_OUT1_SHIFT)
#define UART_MCR_SET_OUT1(v)                                   (((uint32_t)(v) << UART_MCR_OUT1_SHIFT) & UART_MCR_OUT1_MASK)
#define UART_MCR_OUT1_VALUE_DEASSERTED                         0x0U
#define UART_MCR_OUT1_VALUE_ASSERTED                           0x1U

#define UART_MCR_REQ_TO_SEND_SHIFT                             1U
#define UART_MCR_REQ_TO_SEND_WIDTH                             1U
#define UART_MCR_REQ_TO_SEND_MASK                              (((1U << UART_MCR_REQ_TO_SEND_WIDTH) - 1U) << UART_MCR_REQ_TO_SEND_SHIFT)
#define UART_MCR_GET_REQ_TO_SEND(v)                            (((v) & UART_MCR_REQ_TO_SEND_MASK) >> UART_MCR_REQ_TO_SEND_SHIFT)
#define UART_MCR_SET_REQ_TO_SEND(v)                            (((uint32_t)(v) << UART_MCR_REQ_TO_SEND_SHIFT) & UART_MCR_REQ_TO_SEND_MASK)

#define UART_MCR_DATA_TERMINAL_READY_SHIFT                     0U
#define UART_MCR_DATA_TERMINAL_READY_WIDTH                     1U
#define UART_MCR_DATA_TERMINAL_READY_MASK                      (((1U << UART_MCR_DATA_TERMINAL_READY_WIDTH) - 1U) << UART_MCR_DATA_TERMINAL_READY_SHIFT)
#define UART_MCR_GET_DATA_TERMINAL_READY(v)                    (((v) & UART_MCR_DATA_TERMINAL_READY_MASK) >> UART_MCR_DATA_TERMINAL_READY_SHIFT)
#define UART_MCR_SET_DATA_TERMINAL_READY(v)                    (((uint32_t)(v) << UART_MCR_DATA_TERMINAL_READY_SHIFT) & UART_MCR_DATA_TERMINAL_READY_MASK)
#define UART_MCR_DATA_TERMINAL_READY_VALUE_DEASSERTED          0x0U
#define UART_MCR_DATA_TERMINAL_READY_VALUE_ASSERTED            0x1U

#define UART_LSR_RECEIVER_FIFO_ERROR_SHIFT                     7U
#define UART_LSR_RECEIVER_FIFO_ERROR_WIDTH                     1U
#define UART_LSR_RECEIVER_FIFO_ERROR_MASK                      (((1U << UART_LSR_RECEIVER_FIFO_ERROR_WIDTH) - 1U) << UART_LSR_RECEIVER_FIFO_ERROR_SHIFT)
#define UART_LSR_GET_RECEIVER_FIFO_ERROR(v)                    (((v) & UART_LSR_RECEIVER_FIFO_ERROR_MASK) >> UART_LSR_RECEIVER_FIFO_ERROR_SHIFT)
#define UART_LSR_SET_RECEIVER_FIFO_ERROR(v)                    (((uint32_t)(v) << UART_LSR_RECEIVER_FIFO_ERROR_SHIFT) & UART_LSR_RECEIVER_FIFO_ERROR_MASK)
#define UART_LSR_RECEIVER_FIFO_ERROR_VALUE_NO_ERROR            0x0U
#define UART_LSR_RECEIVER_FIFO_ERROR_VALUE_ERROR               0x1U

#define UART_LSR_TRANS_EMPTY_SHIFT                             6U
#define UART_LSR_TRANS_EMPTY_WIDTH                             1U
#define UART_LSR_TRANS_EMPTY_MASK                              (((1U << UART_LSR_TRANS_EMPTY_WIDTH) - 1U) << UART_LSR_TRANS_EMPTY_SHIFT)
#define UART_LSR_GET_TRANS_EMPTY(v)                            (((v) & UART_LSR_TRANS_EMPTY_MASK) >> UART_LSR_TRANS_EMPTY_SHIFT)
#define UART_LSR_SET_TRANS_EMPTY(v)                            (((uint32_t)(v) << UART_LSR_TRANS_EMPTY_SHIFT) & UART_LSR_TRANS_EMPTY_MASK)
#define UART_LSR_TRANS_EMPTY_VALUE_EMPTY                       0x1U
#define UART_LSR_TRANS_EMPTY_VALUE_NOT_EMPTY                   0x0U

#define UART_LSR_TRANS_HOLD_REG_EMPTY_SHIFT                    5U
#define UART_LSR_TRANS_HOLD_REG_EMPTY_WIDTH                    1U
#define UART_LSR_TRANS_HOLD_REG_EMPTY_MASK                     (((1U << UART_LSR_TRANS_HOLD_REG_EMPTY_WIDTH) - 1U) << UART_LSR_TRANS_HOLD_REG_EMPTY_SHIFT)
#define UART_LSR_GET_TRANS_HOLD_REG_EMPTY(v)                   (((v) & UART_LSR_TRANS_HOLD_REG_EMPTY_MASK) >> UART_LSR_TRANS_HOLD_REG_EMPTY_SHIFT)
#define UART_LSR_SET_TRANS_HOLD_REG_EMPTY(v)                   (((uint32_t)(v) << UART_LSR_TRANS_HOLD_REG_EMPTY_SHIFT) & UART_LSR_TRANS_HOLD_REG_EMPTY_MASK)

#define UART_LSR_BREAK_INT_SHIFT                               4U
#define UART_LSR_BREAK_INT_WIDTH                               1U
#define UART_LSR_BREAK_INT_MASK                                (((1U << UART_LSR_BREAK_INT_WIDTH) - 1U) << UART_LSR_BREAK_INT_SHIFT)
#define UART_LSR_GET_BREAK_INT(v)                              (((v) & UART_LSR_BREAK_INT_MASK) >> UART_LSR_BREAK_INT_SHIFT)
#define UART_LSR_SET_BREAK_INT(v)                              (((uint32_t)(v) << UART_LSR_BREAK_INT_SHIFT) & UART_LSR_BREAK_INT_MASK)

#define UART_LSR_FRAMING_ERROR_SHIFT                           3U
#define UART_LSR_FRAMING_ERROR_WIDTH                           1U
#define UART_LSR_FRAMING_ERROR_MASK                            (((1U << UART_LSR_FRAMING_ERROR_WIDTH) - 1U) << UART_LSR_FRAMING_ERROR_SHIFT)
#define UART_LSR_GET_FRAMING_ERROR(v)                          (((v) & UART_LSR_FRAMING_ERROR_MASK) >> UART_LSR_FRAMING_ERROR_SHIFT)
#define UART_LSR_SET_FRAMING_ERROR(v)                          (((uint32_t)(v) << UART_LSR_FRAMING_ERROR_SHIFT) & UART_LSR_FRAMING_ERROR_MASK)
#define UART_LSR_FRAMING_ERROR_VALUE_NO_ERROR                  0x0U
#define UART_LSR_FRAMING_ERROR_VALUE_ERROR                     0x1U

#define UART_LSR_PARITY_ERROR_SHIFT                            2U
#define UART_LSR_PARITY_ERROR_WIDTH                            1U
#define UART_LSR_PARITY_ERROR_MASK                             (((1U << UART_LSR_PARITY_ERROR_WIDTH) - 1U) << UART_LSR_PARITY_ERROR_SHIFT)
#define UART_LSR_GET_PARITY_ERROR(v)                           (((v) & UART_LSR_PARITY_ERROR_MASK) >> UART_LSR_PARITY_ERROR_SHIFT)
#define UART_LSR_SET_PARITY_ERROR(v)                           (((uint32_t)(v) << UART_LSR_PARITY_ERROR_SHIFT) & UART_LSR_PARITY_ERROR_MASK)
#define UART_LSR_PARITY_ERROR_VALUE_NO_ERROR                   0x0U
#define UART_LSR_PARITY_ERROR_VALUE_ERROR                      0x1U

#define UART_LSR_OVERRUN_ERROR_SHIFT                           1U
#define UART_LSR_OVERRUN_ERROR_WIDTH                           1U
#define UART_LSR_OVERRUN_ERROR_MASK                            (((1U << UART_LSR_OVERRUN_ERROR_WIDTH) - 1U) << UART_LSR_OVERRUN_ERROR_SHIFT)
#define UART_LSR_GET_OVERRUN_ERROR(v)                          (((v) & UART_LSR_OVERRUN_ERROR_MASK) >> UART_LSR_OVERRUN_ERROR_SHIFT)
#define UART_LSR_SET_OVERRUN_ERROR(v)                          (((uint32_t)(v) << UART_LSR_OVERRUN_ERROR_SHIFT) & UART_LSR_OVERRUN_ERROR_MASK)
#define UART_LSR_OVERRUN_ERROR_VALUE_NO_ERROR                  0x0U
#define UART_LSR_OVERRUN_ERROR_VALUE_ERROR                     0x1U

#define UART_LSR_DATA_READY_SHIFT                              0U
#define UART_LSR_DATA_READY_WIDTH                              1U
#define UART_LSR_DATA_READY_MASK                               (((1U << UART_LSR_DATA_READY_WIDTH) - 1U) << UART_LSR_DATA_READY_SHIFT)
#define UART_LSR_GET_DATA_READY(v)                             (((v) & UART_LSR_DATA_READY_MASK) >> UART_LSR_DATA_READY_SHIFT)
#define UART_LSR_SET_DATA_READY(v)                             (((uint32_t)(v) << UART_LSR_DATA_READY_SHIFT) & UART_LSR_DATA_READY_MASK)
#define UART_LSR_DATA_READY_VALUE_NOT_READY                    0x0U
#define UART_LSR_DATA_READY_VALUE_READY                        0x1U

#define UART_MSR_DATA_CARRIOR_DETECT_SHIFT                     7U
#define UART_MSR_DATA_CARRIOR_DETECT_WIDTH                     1U
#define UART_MSR_DATA_CARRIOR_DETECT_MASK                      (((1U << UART_MSR_DATA_CARRIOR_DETECT_WIDTH) - 1U) << UART_MSR_DATA_CARRIOR_DETECT_SHIFT)
#define UART_MSR_GET_DATA_CARRIOR_DETECT(v)                    (((v) & UART_MSR_DATA_CARRIOR_DETECT_MASK) >> UART_MSR_DATA_CARRIOR_DETECT_SHIFT)
#define UART_MSR_SET_DATA_CARRIOR_DETECT(v)                    (((uint32_t)(v) << UART_MSR_DATA_CARRIOR_DETECT_SHIFT) & UART_MSR_DATA_CARRIOR_DETECT_MASK)
#define UART_MSR_DATA_CARRIOR_DETECT_VALUE_DEASSERTED          0x0U
#define UART_MSR_DATA_CARRIOR_DETECT_VALUE_ASSERTED            0x1U

#define UART_MSR_RING_INDICATOR_SHIFT                          6U
#define UART_MSR_RING_INDICATOR_WIDTH                          1U
#define UART_MSR_RING_INDICATOR_MASK                           (((1U << UART_MSR_RING_INDICATOR_WIDTH) - 1U) << UART_MSR_RING_INDICATOR_SHIFT)
#define UART_MSR_GET_RING_INDICATOR(v)                         (((v) & UART_MSR_RING_INDICATOR_MASK) >> UART_MSR_RING_INDICATOR_SHIFT)
#define UART_MSR_SET_RING_INDICATOR(v)                         (((uint32_t)(v) << UART_MSR_RING_INDICATOR_SHIFT) & UART_MSR_RING_INDICATOR_MASK)
#define UART_MSR_RING_INDICATOR_VALUE_DEASSERTED               0x0U
#define UART_MSR_RING_INDICATOR_VALUE_ASSERTED                 0x1U

#define UART_MSR_DATA_SET_READY_SHIFT                          5U
#define UART_MSR_DATA_SET_READY_WIDTH                          1U
#define UART_MSR_DATA_SET_READY_MASK                           (((1U << UART_MSR_DATA_SET_READY_WIDTH) - 1U) << UART_MSR_DATA_SET_READY_SHIFT)
#define UART_MSR_GET_DATA_SET_READY(v)                         (((v) & UART_MSR_DATA_SET_READY_MASK) >> UART_MSR_DATA_SET_READY_SHIFT)
#define UART_MSR_SET_DATA_SET_READY(v)                         (((uint32_t)(v) << UART_MSR_DATA_SET_READY_SHIFT) & UART_MSR_DATA_SET_READY_MASK)
#define UART_MSR_DATA_SET_READY_VALUE_DEASSERTED               0x0U
#define UART_MSR_DATA_SET_READY_VALUE_ASSERTED                 0x1U

#define UART_MSR_CLEAR_TO_SEND_SHIFT                           4U
#define UART_MSR_CLEAR_TO_SEND_WIDTH                           1U
#define UART_MSR_CLEAR_TO_SEND_MASK                            (((1U << UART_MSR_CLEAR_TO_SEND_WIDTH) - 1U) << UART_MSR_CLEAR_TO_SEND_SHIFT)
#define UART_MSR_GET_CLEAR_TO_SEND(v)                          (((v) & UART_MSR_CLEAR_TO_SEND_MASK) >> UART_MSR_CLEAR_TO_SEND_SHIFT)
#define UART_MSR_SET_CLEAR_TO_SEND(v)                          (((uint32_t)(v) << UART_MSR_CLEAR_TO_SEND_SHIFT) & UART_MSR_CLEAR_TO_SEND_MASK)
#define UART_MSR_CLEAR_TO_SEND_VALUE_DEASSERTED                0x0U
#define UART_MSR_CLEAR_TO_SEND_VALUE_ASSERTED                  0x1U

#define UART_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT               3U
#define UART_MSR_DELTA_DATA_CARRIER_DETECT_WIDTH               1U
#define UART_MSR_DELTA_DATA_CARRIER_DETECT_MASK                (((1U << UART_MSR_DELTA_DATA_CARRIER_DETECT_WIDTH) - 1U) << UART_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT)
#define UART_MSR_GET_DELTA_DATA_CARRIER_DETECT(v)              (((v) & UART_MSR_DELTA_DATA_CARRIER_DETECT_MASK) >> UART_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT)
#define UART_MSR_SET_DELTA_DATA_CARRIER_DETECT(v)              (((uint32_t)(v) << UART_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT) & UART_MSR_DELTA_DATA_CARRIER_DETECT_MASK)
#define UART_MSR_DELTA_DATA_CARRIER_DETECT_VALUE_NO_CHANGE     0x0U
#define UART_MSR_DELTA_DATA_CARRIER_DETECT_VALUE_CHANGE        0x1U

#define UART_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT            2U
#define UART_MSR_TRAILING_EDGE_RING_INDICATOR_WIDTH            1U
#define UART_MSR_TRAILING_EDGE_RING_INDICATOR_MASK             (((1U << UART_MSR_TRAILING_EDGE_RING_INDICATOR_WIDTH) - 1U) << UART_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT)
#define UART_MSR_GET_TRAILING_EDGE_RING_INDICATOR(v)           (((v) & UART_MSR_TRAILING_EDGE_RING_INDICATOR_MASK) >> UART_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT)
#define UART_MSR_SET_TRAILING_EDGE_RING_INDICATOR(v)           (((uint32_t)(v) << UART_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT) & UART_MSR_TRAILING_EDGE_RING_INDICATOR_MASK)
#define UART_MSR_TRAILING_EDGE_RING_INDICATOR_VALUE_NO_CHANGE  0x0U
#define UART_MSR_TRAILING_EDGE_RING_INDICATOR_VALUE_CHANGE     0x1U

#define UART_MSR_DELTA_DATA_SET_READY_SHIFT                    1U
#define UART_MSR_DELTA_DATA_SET_READY_WIDTH                    1U
#define UART_MSR_DELTA_DATA_SET_READY_MASK                     (((1U << UART_MSR_DELTA_DATA_SET_READY_WIDTH) - 1U) << UART_MSR_DELTA_DATA_SET_READY_SHIFT)
#define UART_MSR_GET_DELTA_DATA_SET_READY(v)                   (((v) & UART_MSR_DELTA_DATA_SET_READY_MASK) >> UART_MSR_DELTA_DATA_SET_READY_SHIFT)
#define UART_MSR_SET_DELTA_DATA_SET_READY(v)                   (((uint32_t)(v) << UART_MSR_DELTA_DATA_SET_READY_SHIFT) & UART_MSR_DELTA_DATA_SET_READY_MASK)
#define UART_MSR_DELTA_DATA_SET_READY_VALUE_NO_CHANGE          0x0U
#define UART_MSR_DELTA_DATA_SET_READY_VALUE_CHANGE             0x1U

#define UART_MSR_DELTA_CLEAR_TO_SEND_SHIFT                     0U
#define UART_MSR_DELTA_CLEAR_TO_SEND_WIDTH                     1U
#define UART_MSR_DELTA_CLEAR_TO_SEND_MASK                      (((1U << UART_MSR_DELTA_CLEAR_TO_SEND_WIDTH) - 1U) << UART_MSR_DELTA_CLEAR_TO_SEND_SHIFT)
#define UART_MSR_GET_DELTA_CLEAR_TO_SEND(v)                    (((v) & UART_MSR_DELTA_CLEAR_TO_SEND_MASK) >> UART_MSR_DELTA_CLEAR_TO_SEND_SHIFT)
#define UART_MSR_SET_DELTA_CLEAR_TO_SEND(v)                    (((uint32_t)(v) << UART_MSR_DELTA_CLEAR_TO_SEND_SHIFT) & UART_MSR_DELTA_CLEAR_TO_SEND_MASK)
#define UART_MSR_DELTA_CLEAR_TO_SEND_VALUE_NO_CHANGE           0x0U
#define UART_MSR_DELTA_CLEAR_TO_SEND_VALUE_CHANGE              0x1U

#define UART_SCR_TEMP_STORE_SPACE_SHIFT                        0U
#define UART_SCR_TEMP_STORE_SPACE_WIDTH                        8U
#define UART_SCR_TEMP_STORE_SPACE_MASK                         (((1U << UART_SCR_TEMP_STORE_SPACE_WIDTH) - 1U) << UART_SCR_TEMP_STORE_SPACE_SHIFT)
#define UART_SCR_GET_TEMP_STORE_SPACE(v)                       (((v) & UART_SCR_TEMP_STORE_SPACE_MASK) >> UART_SCR_TEMP_STORE_SPACE_SHIFT)
#define UART_SCR_SET_TEMP_STORE_SPACE(v)                       (((uint32_t)(v) << UART_SCR_TEMP_STORE_SPACE_SHIFT) & UART_SCR_TEMP_STORE_SPACE_MASK)

#define UART_SRBR_SHADOW_RBR_SHIFT                             0U
#define UART_SRBR_SHADOW_RBR_WIDTH                             8U
#define UART_SRBR_SHADOW_RBR_MASK                              (((1U << UART_SRBR_SHADOW_RBR_WIDTH) - 1U) << UART_SRBR_SHADOW_RBR_SHIFT)
#define UART_SRBR_GET_SHADOW_RBR(v)                            (((v) & UART_SRBR_SHADOW_RBR_MASK) >> UART_SRBR_SHADOW_RBR_SHIFT)
#define UART_SRBR_SET_SHADOW_RBR(v)                            (((uint32_t)(v) << UART_SRBR_SHADOW_RBR_SHIFT) & UART_SRBR_SHADOW_RBR_MASK)

#define UART_STHR_SHADOW_THR_SHIFT                             0U
#define UART_STHR_SHADOW_THR_WIDTH                             8U
#define UART_STHR_SHADOW_THR_MASK                              (((1U << UART_STHR_SHADOW_THR_WIDTH) - 1U) << UART_STHR_SHADOW_THR_SHIFT)
#define UART_STHR_GET_SHADOW_THR(v)                            (((v) & UART_STHR_SHADOW_THR_MASK) >> UART_STHR_SHADOW_THR_SHIFT)
#define UART_STHR_SET_SHADOW_THR(v)                            (((uint32_t)(v) << UART_STHR_SHADOW_THR_SHIFT) & UART_STHR_SHADOW_THR_MASK)

#define UART_FAR_FIFO_ACCESS_TEST_EN_SHIFT                     0U
#define UART_FAR_FIFO_ACCESS_TEST_EN_WIDTH                     1U
#define UART_FAR_FIFO_ACCESS_TEST_EN_MASK                      (((1U << UART_FAR_FIFO_ACCESS_TEST_EN_WIDTH) - 1U) << UART_FAR_FIFO_ACCESS_TEST_EN_SHIFT)
#define UART_FAR_GET_FIFO_ACCESS_TEST_EN(v)                    (((v) & UART_FAR_FIFO_ACCESS_TEST_EN_MASK) >> UART_FAR_FIFO_ACCESS_TEST_EN_SHIFT)
#define UART_FAR_SET_FIFO_ACCESS_TEST_EN(v)                    (((uint32_t)(v) << UART_FAR_FIFO_ACCESS_TEST_EN_SHIFT) & UART_FAR_FIFO_ACCESS_TEST_EN_MASK)
#define UART_FAR_FIFO_ACCESS_TEST_EN_VALUE_DISABLED            0x0U
#define UART_FAR_FIFO_ACCESS_TEST_EN_VALUE_ENABLED             0x1U

#define UART_TFR_TRANS_FIFO_READ_SHIFT                         0U
#define UART_TFR_TRANS_FIFO_READ_WIDTH                         8U
#define UART_TFR_TRANS_FIFO_READ_MASK                          (((1U << UART_TFR_TRANS_FIFO_READ_WIDTH) - 1U) << UART_TFR_TRANS_FIFO_READ_SHIFT)
#define UART_TFR_GET_TRANS_FIFO_READ(v)                        (((v) & UART_TFR_TRANS_FIFO_READ_MASK) >> UART_TFR_TRANS_FIFO_READ_SHIFT)
#define UART_TFR_SET_TRANS_FIFO_READ(v)                        (((uint32_t)(v) << UART_TFR_TRANS_FIFO_READ_SHIFT) & UART_TFR_TRANS_FIFO_READ_MASK)

#define UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT              9U
#define UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_WIDTH              1U
#define UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK               (((1U << UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_WIDTH) - 1U) << UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT)
#define UART_RFW_GET_RECEIVE_FIFO_FRAMING_ERROR(v)             (((v) & UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK) >> UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT)
#define UART_RFW_SET_RECEIVE_FIFO_FRAMING_ERROR(v)             (((uint32_t)(v) << UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT) & UART_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK)

#define UART_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT               8U
#define UART_RFW_RECEIVE_FIFO_PARITY_ERROR_WIDTH               1U
#define UART_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK                (((1U << UART_RFW_RECEIVE_FIFO_PARITY_ERROR_WIDTH) - 1U) << UART_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT)
#define UART_RFW_GET_RECEIVE_FIFO_PARITY_ERROR(v)              (((v) & UART_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK) >> UART_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT)
#define UART_RFW_SET_RECEIVE_FIFO_PARITY_ERROR(v)              (((uint32_t)(v) << UART_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT) & UART_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK)

#define UART_RFW_RECEIVE_FIFO_WRITE_SHIFT                      0U
#define UART_RFW_RECEIVE_FIFO_WRITE_WIDTH                      8U
#define UART_RFW_RECEIVE_FIFO_WRITE_MASK                       (((1U << UART_RFW_RECEIVE_FIFO_WRITE_WIDTH) - 1U) << UART_RFW_RECEIVE_FIFO_WRITE_SHIFT)
#define UART_RFW_GET_RECEIVE_FIFO_WRITE(v)                     (((v) & UART_RFW_RECEIVE_FIFO_WRITE_MASK) >> UART_RFW_RECEIVE_FIFO_WRITE_SHIFT)
#define UART_RFW_SET_RECEIVE_FIFO_WRITE(v)                     (((uint32_t)(v) << UART_RFW_RECEIVE_FIFO_WRITE_SHIFT) & UART_RFW_RECEIVE_FIFO_WRITE_MASK)

#define UART_USR_RECEIVE_FIFO_FULL_SHIFT                       4U
#define UART_USR_RECEIVE_FIFO_FULL_WIDTH                       1U
#define UART_USR_RECEIVE_FIFO_FULL_MASK                        (((1U << UART_USR_RECEIVE_FIFO_FULL_WIDTH) - 1U) << UART_USR_RECEIVE_FIFO_FULL_SHIFT)
#define UART_USR_GET_RECEIVE_FIFO_FULL(v)                      (((v) & UART_USR_RECEIVE_FIFO_FULL_MASK) >> UART_USR_RECEIVE_FIFO_FULL_SHIFT)
#define UART_USR_SET_RECEIVE_FIFO_FULL(v)                      (((uint32_t)(v) << UART_USR_RECEIVE_FIFO_FULL_SHIFT) & UART_USR_RECEIVE_FIFO_FULL_MASK)
#define UART_USR_RECEIVE_FIFO_FULL_VALUE_NOT_FULL              0x0U
#define UART_USR_RECEIVE_FIFO_FULL_VALUE_FULL                  0x1U

#define UART_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT                  3U
#define UART_USR_RECEIVE_FIFO_NOT_EMPTY_WIDTH                  1U
#define UART_USR_RECEIVE_FIFO_NOT_EMPTY_MASK                   (((1U << UART_USR_RECEIVE_FIFO_NOT_EMPTY_WIDTH) - 1U) << UART_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT)
#define UART_USR_GET_RECEIVE_FIFO_NOT_EMPTY(v)                 (((v) & UART_USR_RECEIVE_FIFO_NOT_EMPTY_MASK) >> UART_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT)
#define UART_USR_SET_RECEIVE_FIFO_NOT_EMPTY(v)                 (((uint32_t)(v) << UART_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT) & UART_USR_RECEIVE_FIFO_NOT_EMPTY_MASK)
#define UART_USR_RECEIVE_FIFO_NOT_EMPTY_VALUE_EMPTY            0x0U
#define UART_USR_RECEIVE_FIFO_NOT_EMPTY_VALUE_NOT_EMPTY        0x1U

#define UART_USR_TRASN_FIFO_EMPTY_SHIFT                        2U
#define UART_USR_TRASN_FIFO_EMPTY_WIDTH                        1U
#define UART_USR_TRASN_FIFO_EMPTY_MASK                         (((1U << UART_USR_TRASN_FIFO_EMPTY_WIDTH) - 1U) << UART_USR_TRASN_FIFO_EMPTY_SHIFT)
#define UART_USR_GET_TRASN_FIFO_EMPTY(v)                       (((v) & UART_USR_TRASN_FIFO_EMPTY_MASK) >> UART_USR_TRASN_FIFO_EMPTY_SHIFT)
#define UART_USR_SET_TRASN_FIFO_EMPTY(v)                       (((uint32_t)(v) << UART_USR_TRASN_FIFO_EMPTY_SHIFT) & UART_USR_TRASN_FIFO_EMPTY_MASK)
#define UART_USR_TRASN_FIFO_EMPTY_VALUE_NOT_EMPTY              0x0U
#define UART_USR_TRASN_FIFO_EMPTY_VALUE_EMPTY                  0x1U

#define UART_USR_TRANS_FIFO_NOT_FULL_SHIFT                     1U
#define UART_USR_TRANS_FIFO_NOT_FULL_WIDTH                     1U
#define UART_USR_TRANS_FIFO_NOT_FULL_MASK                      (((1U << UART_USR_TRANS_FIFO_NOT_FULL_WIDTH) - 1U) << UART_USR_TRANS_FIFO_NOT_FULL_SHIFT)
#define UART_USR_GET_TRANS_FIFO_NOT_FULL(v)                    (((v) & UART_USR_TRANS_FIFO_NOT_FULL_MASK) >> UART_USR_TRANS_FIFO_NOT_FULL_SHIFT)
#define UART_USR_SET_TRANS_FIFO_NOT_FULL(v)                    (((uint32_t)(v) << UART_USR_TRANS_FIFO_NOT_FULL_SHIFT) & UART_USR_TRANS_FIFO_NOT_FULL_MASK)
#define UART_USR_TRANS_FIFO_NOT_FULL_VALUE_FULL                0x0U
#define UART_USR_TRANS_FIFO_NOT_FULL_VALUE_NOT_FULL            0x1U

#define UART_USR_UART_BUSY_SHIFT                               0U
#define UART_USR_UART_BUSY_WIDTH                               1U
#define UART_USR_UART_BUSY_MASK                                (((1U << UART_USR_UART_BUSY_WIDTH) - 1U) << UART_USR_UART_BUSY_SHIFT)
#define UART_USR_GET_UART_BUSY(v)                              (((v) & UART_USR_UART_BUSY_MASK) >> UART_USR_UART_BUSY_SHIFT)
#define UART_USR_SET_UART_BUSY(v)                              (((uint32_t)(v) << UART_USR_UART_BUSY_SHIFT) & UART_USR_UART_BUSY_MASK)
#define UART_USR_UART_BUSY_VALUE_IDLE                          0x0U
#define UART_USR_UART_BUSY_VALUE_BUSY                          0x1U

#define UART_TFL_TRANS_FIFO_LEVEL_SHIFT                        0U
#define UART_TFL_TRANS_FIFO_LEVEL_WIDTH                        6U
#define UART_TFL_TRANS_FIFO_LEVEL_MASK                         (((1U << UART_TFL_TRANS_FIFO_LEVEL_WIDTH) - 1U) << UART_TFL_TRANS_FIFO_LEVEL_SHIFT)
#define UART_TFL_GET_TRANS_FIFO_LEVEL(v)                       (((v) & UART_TFL_TRANS_FIFO_LEVEL_MASK) >> UART_TFL_TRANS_FIFO_LEVEL_SHIFT)
#define UART_TFL_SET_TRANS_FIFO_LEVEL(v)                       (((uint32_t)(v) << UART_TFL_TRANS_FIFO_LEVEL_SHIFT) & UART_TFL_TRANS_FIFO_LEVEL_MASK)

#define UART_RFL_RECEIVE_FIFO_LEVEL_SHIFT                      0U
#define UART_RFL_RECEIVE_FIFO_LEVEL_WIDTH                      6U
#define UART_RFL_RECEIVE_FIFO_LEVEL_MASK                       (((1U << UART_RFL_RECEIVE_FIFO_LEVEL_WIDTH) - 1U) << UART_RFL_RECEIVE_FIFO_LEVEL_SHIFT)
#define UART_RFL_GET_RECEIVE_FIFO_LEVEL(v)                     (((v) & UART_RFL_RECEIVE_FIFO_LEVEL_MASK) >> UART_RFL_RECEIVE_FIFO_LEVEL_SHIFT)
#define UART_RFL_SET_RECEIVE_FIFO_LEVEL(v)                     (((uint32_t)(v) << UART_RFL_RECEIVE_FIFO_LEVEL_SHIFT) & UART_RFL_RECEIVE_FIFO_LEVEL_MASK)

#define UART_SRR_XMIT_FIFO_RESET_SHIFT                         2U
#define UART_SRR_XMIT_FIFO_RESET_WIDTH                         1U
#define UART_SRR_XMIT_FIFO_RESET_MASK                          (((1U << UART_SRR_XMIT_FIFO_RESET_WIDTH) - 1U) << UART_SRR_XMIT_FIFO_RESET_SHIFT)
#define UART_SRR_GET_XMIT_FIFO_RESET(v)                        (((v) & UART_SRR_XMIT_FIFO_RESET_MASK) >> UART_SRR_XMIT_FIFO_RESET_SHIFT)
#define UART_SRR_SET_XMIT_FIFO_RESET(v)                        (((uint32_t)(v) << UART_SRR_XMIT_FIFO_RESET_SHIFT) & UART_SRR_XMIT_FIFO_RESET_MASK)

#define UART_SRR_RCVR_FIFO_RESET_SHIFT                         1U
#define UART_SRR_RCVR_FIFO_RESET_WIDTH                         1U
#define UART_SRR_RCVR_FIFO_RESET_MASK                          (((1U << UART_SRR_RCVR_FIFO_RESET_WIDTH) - 1U) << UART_SRR_RCVR_FIFO_RESET_SHIFT)
#define UART_SRR_GET_RCVR_FIFO_RESET(v)                        (((v) & UART_SRR_RCVR_FIFO_RESET_MASK) >> UART_SRR_RCVR_FIFO_RESET_SHIFT)
#define UART_SRR_SET_RCVR_FIFO_RESET(v)                        (((uint32_t)(v) << UART_SRR_RCVR_FIFO_RESET_SHIFT) & UART_SRR_RCVR_FIFO_RESET_MASK)

#define UART_SRR_UART_RESET_SHIFT                              0U
#define UART_SRR_UART_RESET_WIDTH                              1U
#define UART_SRR_UART_RESET_MASK                               (((1U << UART_SRR_UART_RESET_WIDTH) - 1U) << UART_SRR_UART_RESET_SHIFT)
#define UART_SRR_GET_UART_RESET(v)                             (((v) & UART_SRR_UART_RESET_MASK) >> UART_SRR_UART_RESET_SHIFT)
#define UART_SRR_SET_UART_RESET(v)                             (((uint32_t)(v) << UART_SRR_UART_RESET_SHIFT) & UART_SRR_UART_RESET_MASK)

#define UART_SRTS_SHADOW_REQ_TO_SEND_SHIFT                     0U
#define UART_SRTS_SHADOW_REQ_TO_SEND_WIDTH                     1U
#define UART_SRTS_SHADOW_REQ_TO_SEND_MASK                      (((1U << UART_SRTS_SHADOW_REQ_TO_SEND_WIDTH) - 1U) << UART_SRTS_SHADOW_REQ_TO_SEND_SHIFT)
#define UART_SRTS_GET_SHADOW_REQ_TO_SEND(v)                    (((v) & UART_SRTS_SHADOW_REQ_TO_SEND_MASK) >> UART_SRTS_SHADOW_REQ_TO_SEND_SHIFT)
#define UART_SRTS_SET_SHADOW_REQ_TO_SEND(v)                    (((uint32_t)(v) << UART_SRTS_SHADOW_REQ_TO_SEND_SHIFT) & UART_SRTS_SHADOW_REQ_TO_SEND_MASK)

#define UART_SBCR_SHADOW_BREAK_CTRL_SHIFT                      0U
#define UART_SBCR_SHADOW_BREAK_CTRL_WIDTH                      1U
#define UART_SBCR_SHADOW_BREAK_CTRL_MASK                       (((1U << UART_SBCR_SHADOW_BREAK_CTRL_WIDTH) - 1U) << UART_SBCR_SHADOW_BREAK_CTRL_SHIFT)
#define UART_SBCR_GET_SHADOW_BREAK_CTRL(v)                     (((v) & UART_SBCR_SHADOW_BREAK_CTRL_MASK) >> UART_SBCR_SHADOW_BREAK_CTRL_SHIFT)
#define UART_SBCR_SET_SHADOW_BREAK_CTRL(v)                     (((uint32_t)(v) << UART_SBCR_SHADOW_BREAK_CTRL_SHIFT) & UART_SBCR_SHADOW_BREAK_CTRL_MASK)

#define UART_SDMAM_SHADOW_DMA_MODE_SHIFT                       0U
#define UART_SDMAM_SHADOW_DMA_MODE_WIDTH                       1U
#define UART_SDMAM_SHADOW_DMA_MODE_MASK                        (((1U << UART_SDMAM_SHADOW_DMA_MODE_WIDTH) - 1U) << UART_SDMAM_SHADOW_DMA_MODE_SHIFT)
#define UART_SDMAM_GET_SHADOW_DMA_MODE(v)                      (((v) & UART_SDMAM_SHADOW_DMA_MODE_MASK) >> UART_SDMAM_SHADOW_DMA_MODE_SHIFT)
#define UART_SDMAM_SET_SHADOW_DMA_MODE(v)                      (((uint32_t)(v) << UART_SDMAM_SHADOW_DMA_MODE_SHIFT) & UART_SDMAM_SHADOW_DMA_MODE_MASK)
#define UART_SDMAM_SHADOW_DMA_MODE_VALUE_MODE_0                0x0U
#define UART_SDMAM_SHADOW_DMA_MODE_VALUE_MODE_1                0x1U

#define UART_SFE_SHADOW_FIFO_EN_SHIFT                          0U
#define UART_SFE_SHADOW_FIFO_EN_WIDTH                          1U
#define UART_SFE_SHADOW_FIFO_EN_MASK                           (((1U << UART_SFE_SHADOW_FIFO_EN_WIDTH) - 1U) << UART_SFE_SHADOW_FIFO_EN_SHIFT)
#define UART_SFE_GET_SHADOW_FIFO_EN(v)                         (((v) & UART_SFE_SHADOW_FIFO_EN_MASK) >> UART_SFE_SHADOW_FIFO_EN_SHIFT)
#define UART_SFE_SET_SHADOW_FIFO_EN(v)                         (((uint32_t)(v) << UART_SFE_SHADOW_FIFO_EN_SHIFT) & UART_SFE_SHADOW_FIFO_EN_MASK)
#define UART_SFE_SHADOW_FIFO_EN_VALUE_ENABLE                   0x1U
#define UART_SFE_SHADOW_FIFO_EN_VALUE_DISABLE                  0x0U

#define UART_SRT_SHADOW_RCVR_TRIGGER_SHIFT                     0U
#define UART_SRT_SHADOW_RCVR_TRIGGER_WIDTH                     2U
#define UART_SRT_SHADOW_RCVR_TRIGGER_MASK                      (((1U << UART_SRT_SHADOW_RCVR_TRIGGER_WIDTH) - 1U) << UART_SRT_SHADOW_RCVR_TRIGGER_SHIFT)
#define UART_SRT_GET_SHADOW_RCVR_TRIGGER(v)                    (((v) & UART_SRT_SHADOW_RCVR_TRIGGER_MASK) >> UART_SRT_SHADOW_RCVR_TRIGGER_SHIFT)
#define UART_SRT_SET_SHADOW_RCVR_TRIGGER(v)                    (((uint32_t)(v) << UART_SRT_SHADOW_RCVR_TRIGGER_SHIFT) & UART_SRT_SHADOW_RCVR_TRIGGER_MASK)
#define UART_SRT_SHADOW_RCVR_TRIGGER_VALUE_1CHAR               0x0U
#define UART_SRT_SHADOW_RCVR_TRIGGER_VALUE_QUARTER_FULL        0x1U
#define UART_SRT_SHADOW_RCVR_TRIGGER_VALUE_HALF_FULL           0x2U
#define UART_SRT_SHADOW_RCVR_TRIGGER_VALUE_ALMOST_FULL         0x3U

#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT                0U
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_WIDTH                2U
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_MASK                 (((1U << UART_STET_SHADOW_TX_EMPTY_TRIGGER_WIDTH) - 1U) << UART_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT)
#define UART_STET_GET_SHADOW_TX_EMPTY_TRIGGER(v)               (((v) & UART_STET_SHADOW_TX_EMPTY_TRIGGER_MASK) >> UART_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT)
#define UART_STET_SET_SHADOW_TX_EMPTY_TRIGGER(v)               (((uint32_t)(v) << UART_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT) & UART_STET_SHADOW_TX_EMPTY_TRIGGER_MASK)
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_EMPTY          0x0U
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_2CHARS         0x1U
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_QUARTER_FULL   0x2U
#define UART_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_HALF_FULL      0x3U

#define UART_HTX_HALT_TX_EN_SHIFT                              0U
#define UART_HTX_HALT_TX_EN_WIDTH                              1U
#define UART_HTX_HALT_TX_EN_MASK                               (((1U << UART_HTX_HALT_TX_EN_WIDTH) - 1U) << UART_HTX_HALT_TX_EN_SHIFT)
#define UART_HTX_GET_HALT_TX_EN(v)                             (((v) & UART_HTX_HALT_TX_EN_MASK) >> UART_HTX_HALT_TX_EN_SHIFT)
#define UART_HTX_SET_HALT_TX_EN(v)                             (((uint32_t)(v) << UART_HTX_HALT_TX_EN_SHIFT) & UART_HTX_HALT_TX_EN_MASK)
#define UART_HTX_HALT_TX_EN_VALUE_DISABLED                     0x0U
#define UART_HTX_HALT_TX_EN_VALUE_ENABLED                      0x1U

#define UART_DMASA_DMA_SOFTWARE_ACK_SHIFT                      0U
#define UART_DMASA_DMA_SOFTWARE_ACK_WIDTH                      1U
#define UART_DMASA_DMA_SOFTWARE_ACK_MASK                       (((1U << UART_DMASA_DMA_SOFTWARE_ACK_WIDTH) - 1U) << UART_DMASA_DMA_SOFTWARE_ACK_SHIFT)
#define UART_DMASA_GET_DMA_SOFTWARE_ACK(v)                     (((v) & UART_DMASA_DMA_SOFTWARE_ACK_MASK) >> UART_DMASA_DMA_SOFTWARE_ACK_SHIFT)
#define UART_DMASA_SET_DMA_SOFTWARE_ACK(v)                     (((uint32_t)(v) << UART_DMASA_DMA_SOFTWARE_ACK_SHIFT) & UART_DMASA_DMA_SOFTWARE_ACK_MASK)

#define UART_CPR_FIFO_MODE_SHIFT                               16U
#define UART_CPR_FIFO_MODE_WIDTH                               8U
#define UART_CPR_FIFO_MODE_MASK                                (((1U << UART_CPR_FIFO_MODE_WIDTH) - 1U) << UART_CPR_FIFO_MODE_SHIFT)
#define UART_CPR_GET_FIFO_MODE(v)                              (((v) & UART_CPR_FIFO_MODE_MASK) >> UART_CPR_FIFO_MODE_SHIFT)
#define UART_CPR_SET_FIFO_MODE(v)                              (((uint32_t)(v) << UART_CPR_FIFO_MODE_SHIFT) & UART_CPR_FIFO_MODE_MASK)
#define UART_CPR_FIFO_MODE_VALUE_MODE_64                       0x4U

#define UART_CPR_DMA_EXTRA_SHIFT                               13U
#define UART_CPR_DMA_EXTRA_WIDTH                               1U
#define UART_CPR_DMA_EXTRA_MASK                                (((1U << UART_CPR_DMA_EXTRA_WIDTH) - 1U) << UART_CPR_DMA_EXTRA_SHIFT)
#define UART_CPR_GET_DMA_EXTRA(v)                              (((v) & UART_CPR_DMA_EXTRA_MASK) >> UART_CPR_DMA_EXTRA_SHIFT)
#define UART_CPR_SET_DMA_EXTRA(v)                              (((uint32_t)(v) << UART_CPR_DMA_EXTRA_SHIFT) & UART_CPR_DMA_EXTRA_MASK)
#define UART_CPR_DMA_EXTRA_VALUE_ENABLED                       0x1U
#define UART_CPR_DMA_EXTRA_VALUE_DISABLED                      0x0U

#define UART_CPR_UART_ADD_ENCODED_PARAMS_SHIFT                 12U
#define UART_CPR_UART_ADD_ENCODED_PARAMS_WIDTH                 1U
#define UART_CPR_UART_ADD_ENCODED_PARAMS_MASK                  (((1U << UART_CPR_UART_ADD_ENCODED_PARAMS_WIDTH) - 1U) << UART_CPR_UART_ADD_ENCODED_PARAMS_SHIFT)
#define UART_CPR_GET_UART_ADD_ENCODED_PARAMS(v)                (((v) & UART_CPR_UART_ADD_ENCODED_PARAMS_MASK) >> UART_CPR_UART_ADD_ENCODED_PARAMS_SHIFT)
#define UART_CPR_SET_UART_ADD_ENCODED_PARAMS(v)                (((uint32_t)(v) << UART_CPR_UART_ADD_ENCODED_PARAMS_SHIFT) & UART_CPR_UART_ADD_ENCODED_PARAMS_MASK)
#define UART_CPR_UART_ADD_ENCODED_PARAMS_VALUE_ENABLED         0x1U
#define UART_CPR_UART_ADD_ENCODED_PARAMS_VALUE_DISABLED        0x0U

#define UART_CPR_SHADOW_SHIFT                                  11U
#define UART_CPR_SHADOW_WIDTH                                  1U
#define UART_CPR_SHADOW_MASK                                   (((1U << UART_CPR_SHADOW_WIDTH) - 1U) << UART_CPR_SHADOW_SHIFT)
#define UART_CPR_GET_SHADOW(v)                                 (((v) & UART_CPR_SHADOW_MASK) >> UART_CPR_SHADOW_SHIFT)
#define UART_CPR_SET_SHADOW(v)                                 (((uint32_t)(v) << UART_CPR_SHADOW_SHIFT) & UART_CPR_SHADOW_MASK)
#define UART_CPR_SHADOW_VALUE_ENABLED                          0x1U
#define UART_CPR_SHADOW_VALUE_DISABLED                         0x0U

#define UART_CPR_FIFO_STAT_SHIFT                               10U
#define UART_CPR_FIFO_STAT_WIDTH                               1U
#define UART_CPR_FIFO_STAT_MASK                                (((1U << UART_CPR_FIFO_STAT_WIDTH) - 1U) << UART_CPR_FIFO_STAT_SHIFT)
#define UART_CPR_GET_FIFO_STAT(v)                              (((v) & UART_CPR_FIFO_STAT_MASK) >> UART_CPR_FIFO_STAT_SHIFT)
#define UART_CPR_SET_FIFO_STAT(v)                              (((uint32_t)(v) << UART_CPR_FIFO_STAT_SHIFT) & UART_CPR_FIFO_STAT_MASK)
#define UART_CPR_FIFO_STAT_VALUE_ENABLED                       0x1U
#define UART_CPR_FIFO_STAT_VALUE_DISABLED                      0x0U

#define UART_CPR_FIFO_ACCESS_SHIFT                             9U
#define UART_CPR_FIFO_ACCESS_WIDTH                             1U
#define UART_CPR_FIFO_ACCESS_MASK                              (((1U << UART_CPR_FIFO_ACCESS_WIDTH) - 1U) << UART_CPR_FIFO_ACCESS_SHIFT)
#define UART_CPR_GET_FIFO_ACCESS(v)                            (((v) & UART_CPR_FIFO_ACCESS_MASK) >> UART_CPR_FIFO_ACCESS_SHIFT)
#define UART_CPR_SET_FIFO_ACCESS(v)                            (((uint32_t)(v) << UART_CPR_FIFO_ACCESS_SHIFT) & UART_CPR_FIFO_ACCESS_MASK)
#define UART_CPR_FIFO_ACCESS_VALUE_ENABLED                     0x1U
#define UART_CPR_FIFO_ACCESS_VALUE_DISABLED                    0x0U

#define UART_CPR_NEW_FEAT_SHIFT                                8U
#define UART_CPR_NEW_FEAT_WIDTH                                1U
#define UART_CPR_NEW_FEAT_MASK                                 (((1U << UART_CPR_NEW_FEAT_WIDTH) - 1U) << UART_CPR_NEW_FEAT_SHIFT)
#define UART_CPR_GET_NEW_FEAT(v)                               (((v) & UART_CPR_NEW_FEAT_MASK) >> UART_CPR_NEW_FEAT_SHIFT)
#define UART_CPR_SET_NEW_FEAT(v)                               (((uint32_t)(v) << UART_CPR_NEW_FEAT_SHIFT) & UART_CPR_NEW_FEAT_MASK)
#define UART_CPR_NEW_FEAT_VALUE_ENABLED                        0x1U
#define UART_CPR_NEW_FEAT_VALUE_DISABLED                       0x0U

#define UART_CPR_SIR_LP_MODE_SHIFT                             7U
#define UART_CPR_SIR_LP_MODE_WIDTH                             1U
#define UART_CPR_SIR_LP_MODE_MASK                              (((1U << UART_CPR_SIR_LP_MODE_WIDTH) - 1U) << UART_CPR_SIR_LP_MODE_SHIFT)
#define UART_CPR_GET_SIR_LP_MODE(v)                            (((v) & UART_CPR_SIR_LP_MODE_MASK) >> UART_CPR_SIR_LP_MODE_SHIFT)
#define UART_CPR_SET_SIR_LP_MODE(v)                            (((uint32_t)(v) << UART_CPR_SIR_LP_MODE_SHIFT) & UART_CPR_SIR_LP_MODE_MASK)
#define UART_CPR_SIR_LP_MODE_VALUE_ENABLED                     0x1U
#define UART_CPR_SIR_LP_MODE_VALUE_DISABLED                    0x0U

#define UART_CPR_SIR_MODE_SHIFT                                6U
#define UART_CPR_SIR_MODE_WIDTH                                1U
#define UART_CPR_SIR_MODE_MASK                                 (((1U << UART_CPR_SIR_MODE_WIDTH) - 1U) << UART_CPR_SIR_MODE_SHIFT)
#define UART_CPR_GET_SIR_MODE(v)                               (((v) & UART_CPR_SIR_MODE_MASK) >> UART_CPR_SIR_MODE_SHIFT)
#define UART_CPR_SET_SIR_MODE(v)                               (((uint32_t)(v) << UART_CPR_SIR_MODE_SHIFT) & UART_CPR_SIR_MODE_MASK)
#define UART_CPR_SIR_MODE_VALUE_ENABLED                        0x1U
#define UART_CPR_SIR_MODE_VALUE_DISABLED                       0x0U

#define UART_CPR_THRE_MODE_SHIFT                               5U
#define UART_CPR_THRE_MODE_WIDTH                               1U
#define UART_CPR_THRE_MODE_MASK                                (((1U << UART_CPR_THRE_MODE_WIDTH) - 1U) << UART_CPR_THRE_MODE_SHIFT)
#define UART_CPR_GET_THRE_MODE(v)                              (((v) & UART_CPR_THRE_MODE_MASK) >> UART_CPR_THRE_MODE_SHIFT)
#define UART_CPR_SET_THRE_MODE(v)                              (((uint32_t)(v) << UART_CPR_THRE_MODE_SHIFT) & UART_CPR_THRE_MODE_MASK)
#define UART_CPR_THRE_MODE_VALUE_ENABLED                       0x1U
#define UART_CPR_THRE_MODE_VALUE_DISABLED                      0x0U

#define UART_CPR_AFCE_MODE_SHIFT                               4U
#define UART_CPR_AFCE_MODE_WIDTH                               1U
#define UART_CPR_AFCE_MODE_MASK                                (((1U << UART_CPR_AFCE_MODE_WIDTH) - 1U) << UART_CPR_AFCE_MODE_SHIFT)
#define UART_CPR_GET_AFCE_MODE(v)                              (((v) & UART_CPR_AFCE_MODE_MASK) >> UART_CPR_AFCE_MODE_SHIFT)
#define UART_CPR_SET_AFCE_MODE(v)                              (((uint32_t)(v) << UART_CPR_AFCE_MODE_SHIFT) & UART_CPR_AFCE_MODE_MASK)
#define UART_CPR_AFCE_MODE_VALUE_ENABLED                       0x1U
#define UART_CPR_AFCE_MODE_VALUE_DISABLED                      0x0U

#define UART_CPR_APB_DATA_WIDTH_SHIFT                          0U
#define UART_CPR_APB_DATA_WIDTH_WIDTH                          2U
#define UART_CPR_APB_DATA_WIDTH_MASK                           (((1U << UART_CPR_APB_DATA_WIDTH_WIDTH) - 1U) << UART_CPR_APB_DATA_WIDTH_SHIFT)
#define UART_CPR_GET_APB_DATA_WIDTH(v)                         (((v) & UART_CPR_APB_DATA_WIDTH_MASK) >> UART_CPR_APB_DATA_WIDTH_SHIFT)
#define UART_CPR_SET_APB_DATA_WIDTH(v)                         (((uint32_t)(v) << UART_CPR_APB_DATA_WIDTH_SHIFT) & UART_CPR_APB_DATA_WIDTH_MASK)
#define UART_CPR_APB_DATA_WIDTH_VALUE_32BIT                    0x2U

#pragma pack(push)
#pragma pack(1)

typedef struct {
	union {
		uint32_t RBR;
		uint32_t DLL;
		uint32_t THR;
	};
	union {
		uint32_t DLH;
		uint32_t IER;
	};
	union {
		uint32_t FCR;
		uint32_t IIR;
	};
	uint32_t LCR;
	uint32_t MCR;
	uint32_t LSR;
	uint32_t MSR;
	uint32_t SCR;
	uint8_t Reserved_0020[16];
	union {
		uint32_t SRBR;
		uint32_t STHR;
	};
	uint8_t Reserved_0034[60];
	uint32_t FAR;
	uint32_t TFR;
	uint32_t RFW;
	uint32_t USR;
	uint32_t TFL;
	uint32_t RFL;
	uint32_t SRR;
	uint32_t SRTS;
	uint32_t SBCR;
	uint32_t SDMAM;
	uint32_t SFE;
	uint32_t SRT;
	uint32_t STET;
	uint32_t HTX;
	uint32_t DMASA;
	uint8_t Reserved_00AC[72];
	uint32_t CPR;
	uint32_t UCV;
	uint32_t CTR;
} UART_t;

#pragma pack(pop)

#endif

