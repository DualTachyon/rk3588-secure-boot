// Automatically generated by https://github.com/DualTachyon/rk3588-svd

/* Copyright 2024 Dual Tachyon
 * https://github.com/DualTachyon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
 */

#ifndef RK3588_UART2_H
#define RK3588_UART2_H

#include <stdint.h>

#ifndef REQ_ENUM_EQUALS
#define REG_ENUM_EQUALS(p, r, b, e)                            (p##_##r##_GET_##b(p##_##r) == p##_##r##_##b##_VALUE_##e)
#endif

#ifndef REQ_ENUM_BITS
#define REG_ENUM_BITS(p, r, b, e)                              (p##_##r##_SET_##b(p##_##r##_##b##_VALUE_##e))
#endif

#ifndef REQ_ENUM_BITS_WM
#define REG_ENUM_BITS_WM(p, r, b, e)                           (p##_##r##_SET_##b(p##_##r##_##b##_VALUE_##e) | (p##_##r##_##b##_MASK << 16))
#endif

#ifndef REQ_ENUM_GET
#define REG_ENUM_GET(p, r, b, e)                               (p##_##r##_GET_##b(p##_##r))
#endif

#ifndef REQ_ENUM_VALUE
#define REG_ENUM_VALUE(p, r, b, e)                             (p##_##r##_##b##_VALUE_##e)
#endif

#define UART2_BASE                                             0x0FEB50000
#define UART2_SIZE                                             0x000010000

#define UART2_RBR_ADDR                                         (UART2_BASE + 0x0000)
#define UART2_RBR                                              (*(volatile uint32_t *)UART2_RBR_ADDR)
#define UART2_RBR_DATA_INPUT_SHIFT                             0U
#define UART2_RBR_DATA_INPUT_WIDTH                             8U
#define UART2_RBR_DATA_INPUT_MASK                              (((1U << UART2_RBR_DATA_INPUT_WIDTH) - 1U) << UART2_RBR_DATA_INPUT_SHIFT)
#define UART2_RBR_GET_DATA_INPUT(v)                            (((v) & UART2_RBR_DATA_INPUT_MASK) >> UART2_RBR_DATA_INPUT_SHIFT)
#define UART2_RBR_SET_DATA_INPUT(v)                            (((v) << UART2_RBR_DATA_INPUT_SHIFT) & UART2_RBR_DATA_INPUT_MASK)

#define UART2_DLL_ADDR                                         (UART2_BASE + 0x0000)
#define UART2_DLL                                              (*(volatile uint32_t *)UART2_DLL_ADDR)
#define UART2_DLL_BAUD_RATE_DIVISOR_L_SHIFT                    0U
#define UART2_DLL_BAUD_RATE_DIVISOR_L_WIDTH                    8U
#define UART2_DLL_BAUD_RATE_DIVISOR_L_MASK                     (((1U << UART2_DLL_BAUD_RATE_DIVISOR_L_WIDTH) - 1U) << UART2_DLL_BAUD_RATE_DIVISOR_L_SHIFT)
#define UART2_DLL_GET_BAUD_RATE_DIVISOR_L(v)                   (((v) & UART2_DLL_BAUD_RATE_DIVISOR_L_MASK) >> UART2_DLL_BAUD_RATE_DIVISOR_L_SHIFT)
#define UART2_DLL_SET_BAUD_RATE_DIVISOR_L(v)                   (((v) << UART2_DLL_BAUD_RATE_DIVISOR_L_SHIFT) & UART2_DLL_BAUD_RATE_DIVISOR_L_MASK)

#define UART2_THR_ADDR                                         (UART2_BASE + 0x0000)
#define UART2_THR                                              (*(volatile uint32_t *)UART2_THR_ADDR)
#define UART2_THR_DATA_OUTPUT_SHIFT                            0U
#define UART2_THR_DATA_OUTPUT_WIDTH                            8U
#define UART2_THR_DATA_OUTPUT_MASK                             (((1U << UART2_THR_DATA_OUTPUT_WIDTH) - 1U) << UART2_THR_DATA_OUTPUT_SHIFT)
#define UART2_THR_GET_DATA_OUTPUT(v)                           (((v) & UART2_THR_DATA_OUTPUT_MASK) >> UART2_THR_DATA_OUTPUT_SHIFT)
#define UART2_THR_SET_DATA_OUTPUT(v)                           (((v) << UART2_THR_DATA_OUTPUT_SHIFT) & UART2_THR_DATA_OUTPUT_MASK)

#define UART2_DLH_ADDR                                         (UART2_BASE + 0x0004)
#define UART2_DLH                                              (*(volatile uint32_t *)UART2_DLH_ADDR)
#define UART2_DLH_BAUD_RATE_DIVISOR_H_SHIFT                    0U
#define UART2_DLH_BAUD_RATE_DIVISOR_H_WIDTH                    8U
#define UART2_DLH_BAUD_RATE_DIVISOR_H_MASK                     (((1U << UART2_DLH_BAUD_RATE_DIVISOR_H_WIDTH) - 1U) << UART2_DLH_BAUD_RATE_DIVISOR_H_SHIFT)
#define UART2_DLH_GET_BAUD_RATE_DIVISOR_H(v)                   (((v) & UART2_DLH_BAUD_RATE_DIVISOR_H_MASK) >> UART2_DLH_BAUD_RATE_DIVISOR_H_SHIFT)
#define UART2_DLH_SET_BAUD_RATE_DIVISOR_H(v)                   (((v) << UART2_DLH_BAUD_RATE_DIVISOR_H_SHIFT) & UART2_DLH_BAUD_RATE_DIVISOR_H_MASK)

#define UART2_IER_ADDR                                         (UART2_BASE + 0x0004)
#define UART2_IER                                              (*(volatile uint32_t *)UART2_IER_ADDR)
#define UART2_IER_PROG_THRE_INT_EN_SHIFT                       7U
#define UART2_IER_PROG_THRE_INT_EN_WIDTH                       1U
#define UART2_IER_PROG_THRE_INT_EN_MASK                        (((1U << UART2_IER_PROG_THRE_INT_EN_WIDTH) - 1U) << UART2_IER_PROG_THRE_INT_EN_SHIFT)
#define UART2_IER_GET_PROG_THRE_INT_EN(v)                      (((v) & UART2_IER_PROG_THRE_INT_EN_MASK) >> UART2_IER_PROG_THRE_INT_EN_SHIFT)
#define UART2_IER_SET_PROG_THRE_INT_EN(v)                      (((v) << UART2_IER_PROG_THRE_INT_EN_SHIFT) & UART2_IER_PROG_THRE_INT_EN_MASK)
#define UART2_IER_PROG_THRE_INT_EN_VALUE_DISABLED              0x0U
#define UART2_IER_PROG_THRE_INT_EN_VALUE_ENABLED               0x1U

#define UART2_IER_MODEM_STATUS_INT_EN_SHIFT                    3U
#define UART2_IER_MODEM_STATUS_INT_EN_WIDTH                    1U
#define UART2_IER_MODEM_STATUS_INT_EN_MASK                     (((1U << UART2_IER_MODEM_STATUS_INT_EN_WIDTH) - 1U) << UART2_IER_MODEM_STATUS_INT_EN_SHIFT)
#define UART2_IER_GET_MODEM_STATUS_INT_EN(v)                   (((v) & UART2_IER_MODEM_STATUS_INT_EN_MASK) >> UART2_IER_MODEM_STATUS_INT_EN_SHIFT)
#define UART2_IER_SET_MODEM_STATUS_INT_EN(v)                   (((v) << UART2_IER_MODEM_STATUS_INT_EN_SHIFT) & UART2_IER_MODEM_STATUS_INT_EN_MASK)
#define UART2_IER_MODEM_STATUS_INT_EN_VALUE_DISABLED           0x0U
#define UART2_IER_MODEM_STATUS_INT_EN_VALUE_ENABLED            0x1U

#define UART2_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT             2U
#define UART2_IER_RECEIVE_LINE_STATUS_INT_EN_WIDTH             1U
#define UART2_IER_RECEIVE_LINE_STATUS_INT_EN_MASK              (((1U << UART2_IER_RECEIVE_LINE_STATUS_INT_EN_WIDTH) - 1U) << UART2_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT)
#define UART2_IER_GET_RECEIVE_LINE_STATUS_INT_EN(v)            (((v) & UART2_IER_RECEIVE_LINE_STATUS_INT_EN_MASK) >> UART2_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT)
#define UART2_IER_SET_RECEIVE_LINE_STATUS_INT_EN(v)            (((v) << UART2_IER_RECEIVE_LINE_STATUS_INT_EN_SHIFT) & UART2_IER_RECEIVE_LINE_STATUS_INT_EN_MASK)
#define UART2_IER_RECEIVE_LINE_STATUS_INT_EN_VALUE_DISABLED    0x0U
#define UART2_IER_RECEIVE_LINE_STATUS_INT_EN_VALUE_ENABLED     0x1U

#define UART2_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT                1U
#define UART2_IER_TRANS_HOLD_EMPTY_INT_EN_WIDTH                1U
#define UART2_IER_TRANS_HOLD_EMPTY_INT_EN_MASK                 (((1U << UART2_IER_TRANS_HOLD_EMPTY_INT_EN_WIDTH) - 1U) << UART2_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT)
#define UART2_IER_GET_TRANS_HOLD_EMPTY_INT_EN(v)               (((v) & UART2_IER_TRANS_HOLD_EMPTY_INT_EN_MASK) >> UART2_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT)
#define UART2_IER_SET_TRANS_HOLD_EMPTY_INT_EN(v)               (((v) << UART2_IER_TRANS_HOLD_EMPTY_INT_EN_SHIFT) & UART2_IER_TRANS_HOLD_EMPTY_INT_EN_MASK)
#define UART2_IER_TRANS_HOLD_EMPTY_INT_EN_VALUE_DISABLED       0x0U
#define UART2_IER_TRANS_HOLD_EMPTY_INT_EN_VALUE_ENABLED        0x1U

#define UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT          0U
#define UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_WIDTH          1U
#define UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK           (((1U << UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_WIDTH) - 1U) << UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT)
#define UART2_IER_GET_RECEIVE_DATA_AVAILABLE_INT_EN(v)         (((v) & UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK) >> UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT)
#define UART2_IER_SET_RECEIVE_DATA_AVAILABLE_INT_EN(v)         (((v) << UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_SHIFT) & UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_MASK)
#define UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_VALUE_DISABLED 0x0U
#define UART2_IER_RECEIVE_DATA_AVAILABLE_INT_EN_VALUE_ENABLED  0x1U

#define UART2_FCR_ADDR                                         (UART2_BASE + 0x0008)
#define UART2_FCR                                              (*(volatile uint32_t *)UART2_FCR_ADDR)
#define UART2_FCR_RCVR_TRIGGER_SHIFT                           6U
#define UART2_FCR_RCVR_TRIGGER_WIDTH                           2U
#define UART2_FCR_RCVR_TRIGGER_MASK                            (((1U << UART2_FCR_RCVR_TRIGGER_WIDTH) - 1U) << UART2_FCR_RCVR_TRIGGER_SHIFT)
#define UART2_FCR_GET_RCVR_TRIGGER(v)                          (((v) & UART2_FCR_RCVR_TRIGGER_MASK) >> UART2_FCR_RCVR_TRIGGER_SHIFT)
#define UART2_FCR_SET_RCVR_TRIGGER(v)                          (((v) << UART2_FCR_RCVR_TRIGGER_SHIFT) & UART2_FCR_RCVR_TRIGGER_MASK)
#define UART2_FCR_RCVR_TRIGGER_VALUE_1CHAR                     0x0U
#define UART2_FCR_RCVR_TRIGGER_VALUE_QUARTER_FULL              0x1U
#define UART2_FCR_RCVR_TRIGGER_VALUE_HALF_FULL                 0x2U
#define UART2_FCR_RCVR_TRIGGER_VALUE_ALMOST_FULL               0x3U

#define UART2_FCR_TX_EMPTY_TRIGGER_SHIFT                       4U
#define UART2_FCR_TX_EMPTY_TRIGGER_WIDTH                       2U
#define UART2_FCR_TX_EMPTY_TRIGGER_MASK                        (((1U << UART2_FCR_TX_EMPTY_TRIGGER_WIDTH) - 1U) << UART2_FCR_TX_EMPTY_TRIGGER_SHIFT)
#define UART2_FCR_GET_TX_EMPTY_TRIGGER(v)                      (((v) & UART2_FCR_TX_EMPTY_TRIGGER_MASK) >> UART2_FCR_TX_EMPTY_TRIGGER_SHIFT)
#define UART2_FCR_SET_TX_EMPTY_TRIGGER(v)                      (((v) << UART2_FCR_TX_EMPTY_TRIGGER_SHIFT) & UART2_FCR_TX_EMPTY_TRIGGER_MASK)
#define UART2_FCR_TX_EMPTY_TRIGGER_VALUE_EMPTY                 0x0U
#define UART2_FCR_TX_EMPTY_TRIGGER_VALUE_2CHARS                0x1U
#define UART2_FCR_TX_EMPTY_TRIGGER_VALUE_QUARTER_FULL          0x2U
#define UART2_FCR_TX_EMPTY_TRIGGER_VALUE_HALF_FULL             0x3U

#define UART2_FCR_DMA_MODE_SHIFT                               3U
#define UART2_FCR_DMA_MODE_WIDTH                               1U
#define UART2_FCR_DMA_MODE_MASK                                (((1U << UART2_FCR_DMA_MODE_WIDTH) - 1U) << UART2_FCR_DMA_MODE_SHIFT)
#define UART2_FCR_GET_DMA_MODE(v)                              (((v) & UART2_FCR_DMA_MODE_MASK) >> UART2_FCR_DMA_MODE_SHIFT)
#define UART2_FCR_SET_DMA_MODE(v)                              (((v) << UART2_FCR_DMA_MODE_SHIFT) & UART2_FCR_DMA_MODE_MASK)
#define UART2_FCR_DMA_MODE_VALUE_MODE_0                        0x0U
#define UART2_FCR_DMA_MODE_VALUE_MODE_1                        0x1U

#define UART2_FCR_XMIT_FIFO_RESET_SHIFT                        2U
#define UART2_FCR_XMIT_FIFO_RESET_WIDTH                        1U
#define UART2_FCR_XMIT_FIFO_RESET_MASK                         (((1U << UART2_FCR_XMIT_FIFO_RESET_WIDTH) - 1U) << UART2_FCR_XMIT_FIFO_RESET_SHIFT)
#define UART2_FCR_GET_XMIT_FIFO_RESET(v)                       (((v) & UART2_FCR_XMIT_FIFO_RESET_MASK) >> UART2_FCR_XMIT_FIFO_RESET_SHIFT)
#define UART2_FCR_SET_XMIT_FIFO_RESET(v)                       (((v) << UART2_FCR_XMIT_FIFO_RESET_SHIFT) & UART2_FCR_XMIT_FIFO_RESET_MASK)

#define UART2_FCR_RCVR_FIFO_RESET_SHIFT                        1U
#define UART2_FCR_RCVR_FIFO_RESET_WIDTH                        1U
#define UART2_FCR_RCVR_FIFO_RESET_MASK                         (((1U << UART2_FCR_RCVR_FIFO_RESET_WIDTH) - 1U) << UART2_FCR_RCVR_FIFO_RESET_SHIFT)
#define UART2_FCR_GET_RCVR_FIFO_RESET(v)                       (((v) & UART2_FCR_RCVR_FIFO_RESET_MASK) >> UART2_FCR_RCVR_FIFO_RESET_SHIFT)
#define UART2_FCR_SET_RCVR_FIFO_RESET(v)                       (((v) << UART2_FCR_RCVR_FIFO_RESET_SHIFT) & UART2_FCR_RCVR_FIFO_RESET_MASK)

#define UART2_FCR_FIFO_EN_SHIFT                                0U
#define UART2_FCR_FIFO_EN_WIDTH                                1U
#define UART2_FCR_FIFO_EN_MASK                                 (((1U << UART2_FCR_FIFO_EN_WIDTH) - 1U) << UART2_FCR_FIFO_EN_SHIFT)
#define UART2_FCR_GET_FIFO_EN(v)                               (((v) & UART2_FCR_FIFO_EN_MASK) >> UART2_FCR_FIFO_EN_SHIFT)
#define UART2_FCR_SET_FIFO_EN(v)                               (((v) << UART2_FCR_FIFO_EN_SHIFT) & UART2_FCR_FIFO_EN_MASK)

#define UART2_IIR_ADDR                                         (UART2_BASE + 0x0008)
#define UART2_IIR                                              (*(volatile uint32_t *)UART2_IIR_ADDR)
#define UART2_IIR_FIFOS_EN_SHIFT                               6U
#define UART2_IIR_FIFOS_EN_WIDTH                               2U
#define UART2_IIR_FIFOS_EN_MASK                                (((1U << UART2_IIR_FIFOS_EN_WIDTH) - 1U) << UART2_IIR_FIFOS_EN_SHIFT)
#define UART2_IIR_GET_FIFOS_EN(v)                              (((v) & UART2_IIR_FIFOS_EN_MASK) >> UART2_IIR_FIFOS_EN_SHIFT)
#define UART2_IIR_SET_FIFOS_EN(v)                              (((v) << UART2_IIR_FIFOS_EN_SHIFT) & UART2_IIR_FIFOS_EN_MASK)
#define UART2_IIR_FIFOS_EN_VALUE_DISABLED                      0x0U
#define UART2_IIR_FIFOS_EN_VALUE_ENABLED                       0x3U

#define UART2_IIR_INT_ID_SHIFT                                 0U
#define UART2_IIR_INT_ID_WIDTH                                 4U
#define UART2_IIR_INT_ID_MASK                                  (((1U << UART2_IIR_INT_ID_WIDTH) - 1U) << UART2_IIR_INT_ID_SHIFT)
#define UART2_IIR_GET_INT_ID(v)                                (((v) & UART2_IIR_INT_ID_MASK) >> UART2_IIR_INT_ID_SHIFT)
#define UART2_IIR_SET_INT_ID(v)                                (((v) << UART2_IIR_INT_ID_SHIFT) & UART2_IIR_INT_ID_MASK)
#define UART2_IIR_INT_ID_VALUE_MODEM_STATUS                    0x0U
#define UART2_IIR_INT_ID_VALUE_NO_INTERRUPT_PENDING            0x1U
#define UART2_IIR_INT_ID_VALUE_THR_EMPTY                       0x2U
#define UART2_IIR_INT_ID_VALUE_RECEIVED_DATA_AVAILABLE         0x4U
#define UART2_IIR_INT_ID_VALUE_RECEIVER_LINE_STATUS            0x6U
#define UART2_IIR_INT_ID_VALUE_BUSY_DETECT                     0x7U
#define UART2_IIR_INT_ID_VALUE_CHARACTER_TIMEOUT               0xCU

#define UART2_LCR_ADDR                                         (UART2_BASE + 0x000C)
#define UART2_LCR                                              (*(volatile uint32_t *)UART2_LCR_ADDR)
#define UART2_LCR_DIV_LAT_ACCESS_SHIFT                         7U
#define UART2_LCR_DIV_LAT_ACCESS_WIDTH                         1U
#define UART2_LCR_DIV_LAT_ACCESS_MASK                          (((1U << UART2_LCR_DIV_LAT_ACCESS_WIDTH) - 1U) << UART2_LCR_DIV_LAT_ACCESS_SHIFT)
#define UART2_LCR_GET_DIV_LAT_ACCESS(v)                        (((v) & UART2_LCR_DIV_LAT_ACCESS_MASK) >> UART2_LCR_DIV_LAT_ACCESS_SHIFT)
#define UART2_LCR_SET_DIV_LAT_ACCESS(v)                        (((v) << UART2_LCR_DIV_LAT_ACCESS_SHIFT) & UART2_LCR_DIV_LAT_ACCESS_MASK)
#define UART2_LCR_DIV_LAT_ACCESS_VALUE_ENABLE                  0x1U
#define UART2_LCR_DIV_LAT_ACCESS_VALUE_DISABLE                 0x0U

#define UART2_LCR_BREAK_CTRL_SHIFT                             6U
#define UART2_LCR_BREAK_CTRL_WIDTH                             1U
#define UART2_LCR_BREAK_CTRL_MASK                              (((1U << UART2_LCR_BREAK_CTRL_WIDTH) - 1U) << UART2_LCR_BREAK_CTRL_SHIFT)
#define UART2_LCR_GET_BREAK_CTRL(v)                            (((v) & UART2_LCR_BREAK_CTRL_MASK) >> UART2_LCR_BREAK_CTRL_SHIFT)
#define UART2_LCR_SET_BREAK_CTRL(v)                            (((v) << UART2_LCR_BREAK_CTRL_SHIFT) & UART2_LCR_BREAK_CTRL_MASK)

#define UART2_LCR_STICK_PARITY_SHIFT                           5U
#define UART2_LCR_STICK_PARITY_WIDTH                           1U
#define UART2_LCR_STICK_PARITY_MASK                            (((1U << UART2_LCR_STICK_PARITY_WIDTH) - 1U) << UART2_LCR_STICK_PARITY_SHIFT)
#define UART2_LCR_GET_STICK_PARITY(v)                          (((v) & UART2_LCR_STICK_PARITY_MASK) >> UART2_LCR_STICK_PARITY_SHIFT)
#define UART2_LCR_SET_STICK_PARITY(v)                          (((v) << UART2_LCR_STICK_PARITY_SHIFT) & UART2_LCR_STICK_PARITY_MASK)

#define UART2_LCR_EVEN_PARITY_SEL_SHIFT                        4U
#define UART2_LCR_EVEN_PARITY_SEL_WIDTH                        1U
#define UART2_LCR_EVEN_PARITY_SEL_MASK                         (((1U << UART2_LCR_EVEN_PARITY_SEL_WIDTH) - 1U) << UART2_LCR_EVEN_PARITY_SEL_SHIFT)
#define UART2_LCR_GET_EVEN_PARITY_SEL(v)                       (((v) & UART2_LCR_EVEN_PARITY_SEL_MASK) >> UART2_LCR_EVEN_PARITY_SEL_SHIFT)
#define UART2_LCR_SET_EVEN_PARITY_SEL(v)                       (((v) << UART2_LCR_EVEN_PARITY_SEL_SHIFT) & UART2_LCR_EVEN_PARITY_SEL_MASK)

#define UART2_LCR_PARITY_EN_SHIFT                              3U
#define UART2_LCR_PARITY_EN_WIDTH                              1U
#define UART2_LCR_PARITY_EN_MASK                               (((1U << UART2_LCR_PARITY_EN_WIDTH) - 1U) << UART2_LCR_PARITY_EN_SHIFT)
#define UART2_LCR_GET_PARITY_EN(v)                             (((v) & UART2_LCR_PARITY_EN_MASK) >> UART2_LCR_PARITY_EN_SHIFT)
#define UART2_LCR_SET_PARITY_EN(v)                             (((v) << UART2_LCR_PARITY_EN_SHIFT) & UART2_LCR_PARITY_EN_MASK)
#define UART2_LCR_PARITY_EN_VALUE_DISABLED                     0x0U
#define UART2_LCR_PARITY_EN_VALUE_ENABLED                      0x1U

#define UART2_LCR_STOP_BITS_NUM_SHIFT                          2U
#define UART2_LCR_STOP_BITS_NUM_WIDTH                          1U
#define UART2_LCR_STOP_BITS_NUM_MASK                           (((1U << UART2_LCR_STOP_BITS_NUM_WIDTH) - 1U) << UART2_LCR_STOP_BITS_NUM_SHIFT)
#define UART2_LCR_GET_STOP_BITS_NUM(v)                         (((v) & UART2_LCR_STOP_BITS_NUM_MASK) >> UART2_LCR_STOP_BITS_NUM_SHIFT)
#define UART2_LCR_SET_STOP_BITS_NUM(v)                         (((v) << UART2_LCR_STOP_BITS_NUM_SHIFT) & UART2_LCR_STOP_BITS_NUM_MASK)
#define UART2_LCR_STOP_BITS_NUM_VALUE_1_STOP_BIT               0x0U
#define UART2_LCR_STOP_BITS_NUM_VALUE_1_5_STOP_BITS            0x1U

#define UART2_LCR_DATA_LENGTH_SEL_SHIFT                        0U
#define UART2_LCR_DATA_LENGTH_SEL_WIDTH                        2U
#define UART2_LCR_DATA_LENGTH_SEL_MASK                         (((1U << UART2_LCR_DATA_LENGTH_SEL_WIDTH) - 1U) << UART2_LCR_DATA_LENGTH_SEL_SHIFT)
#define UART2_LCR_GET_DATA_LENGTH_SEL(v)                       (((v) & UART2_LCR_DATA_LENGTH_SEL_MASK) >> UART2_LCR_DATA_LENGTH_SEL_SHIFT)
#define UART2_LCR_SET_DATA_LENGTH_SEL(v)                       (((v) << UART2_LCR_DATA_LENGTH_SEL_SHIFT) & UART2_LCR_DATA_LENGTH_SEL_MASK)
#define UART2_LCR_DATA_LENGTH_SEL_VALUE_5BITS                  0x0U
#define UART2_LCR_DATA_LENGTH_SEL_VALUE_6BITS                  0x1U
#define UART2_LCR_DATA_LENGTH_SEL_VALUE_7BITS                  0x2U
#define UART2_LCR_DATA_LENGTH_SEL_VALUE_8BITS                  0x3U

#define UART2_MCR_ADDR                                         (UART2_BASE + 0x0010)
#define UART2_MCR                                              (*(volatile uint32_t *)UART2_MCR_ADDR)
#define UART2_MCR_AUTO_FLOW_CTRL_EN_SHIFT                      5U
#define UART2_MCR_AUTO_FLOW_CTRL_EN_WIDTH                      1U
#define UART2_MCR_AUTO_FLOW_CTRL_EN_MASK                       (((1U << UART2_MCR_AUTO_FLOW_CTRL_EN_WIDTH) - 1U) << UART2_MCR_AUTO_FLOW_CTRL_EN_SHIFT)
#define UART2_MCR_GET_AUTO_FLOW_CTRL_EN(v)                     (((v) & UART2_MCR_AUTO_FLOW_CTRL_EN_MASK) >> UART2_MCR_AUTO_FLOW_CTRL_EN_SHIFT)
#define UART2_MCR_SET_AUTO_FLOW_CTRL_EN(v)                     (((v) << UART2_MCR_AUTO_FLOW_CTRL_EN_SHIFT) & UART2_MCR_AUTO_FLOW_CTRL_EN_MASK)
#define UART2_MCR_AUTO_FLOW_CTRL_EN_VALUE_DISABLED             0x0U
#define UART2_MCR_AUTO_FLOW_CTRL_EN_VALUE_ENABLED              0x1U

#define UART2_MCR_LOOPBACK_SHIFT                               4U
#define UART2_MCR_LOOPBACK_WIDTH                               1U
#define UART2_MCR_LOOPBACK_MASK                                (((1U << UART2_MCR_LOOPBACK_WIDTH) - 1U) << UART2_MCR_LOOPBACK_SHIFT)
#define UART2_MCR_GET_LOOPBACK(v)                              (((v) & UART2_MCR_LOOPBACK_MASK) >> UART2_MCR_LOOPBACK_SHIFT)
#define UART2_MCR_SET_LOOPBACK(v)                              (((v) << UART2_MCR_LOOPBACK_SHIFT) & UART2_MCR_LOOPBACK_MASK)

#define UART2_MCR_OUT2_SHIFT                                   3U
#define UART2_MCR_OUT2_WIDTH                                   1U
#define UART2_MCR_OUT2_MASK                                    (((1U << UART2_MCR_OUT2_WIDTH) - 1U) << UART2_MCR_OUT2_SHIFT)
#define UART2_MCR_GET_OUT2(v)                                  (((v) & UART2_MCR_OUT2_MASK) >> UART2_MCR_OUT2_SHIFT)
#define UART2_MCR_SET_OUT2(v)                                  (((v) << UART2_MCR_OUT2_SHIFT) & UART2_MCR_OUT2_MASK)
#define UART2_MCR_OUT2_VALUE_DEASSERTED                        0x0U
#define UART2_MCR_OUT2_VALUE_ASSERTED                          0x1U

#define UART2_MCR_OUT1_SHIFT                                   2U
#define UART2_MCR_OUT1_WIDTH                                   1U
#define UART2_MCR_OUT1_MASK                                    (((1U << UART2_MCR_OUT1_WIDTH) - 1U) << UART2_MCR_OUT1_SHIFT)
#define UART2_MCR_GET_OUT1(v)                                  (((v) & UART2_MCR_OUT1_MASK) >> UART2_MCR_OUT1_SHIFT)
#define UART2_MCR_SET_OUT1(v)                                  (((v) << UART2_MCR_OUT1_SHIFT) & UART2_MCR_OUT1_MASK)
#define UART2_MCR_OUT1_VALUE_DEASSERTED                        0x0U
#define UART2_MCR_OUT1_VALUE_ASSERTED                          0x1U

#define UART2_MCR_REQ_TO_SEND_SHIFT                            1U
#define UART2_MCR_REQ_TO_SEND_WIDTH                            1U
#define UART2_MCR_REQ_TO_SEND_MASK                             (((1U << UART2_MCR_REQ_TO_SEND_WIDTH) - 1U) << UART2_MCR_REQ_TO_SEND_SHIFT)
#define UART2_MCR_GET_REQ_TO_SEND(v)                           (((v) & UART2_MCR_REQ_TO_SEND_MASK) >> UART2_MCR_REQ_TO_SEND_SHIFT)
#define UART2_MCR_SET_REQ_TO_SEND(v)                           (((v) << UART2_MCR_REQ_TO_SEND_SHIFT) & UART2_MCR_REQ_TO_SEND_MASK)

#define UART2_MCR_DATA_TERMINAL_READY_SHIFT                    0U
#define UART2_MCR_DATA_TERMINAL_READY_WIDTH                    1U
#define UART2_MCR_DATA_TERMINAL_READY_MASK                     (((1U << UART2_MCR_DATA_TERMINAL_READY_WIDTH) - 1U) << UART2_MCR_DATA_TERMINAL_READY_SHIFT)
#define UART2_MCR_GET_DATA_TERMINAL_READY(v)                   (((v) & UART2_MCR_DATA_TERMINAL_READY_MASK) >> UART2_MCR_DATA_TERMINAL_READY_SHIFT)
#define UART2_MCR_SET_DATA_TERMINAL_READY(v)                   (((v) << UART2_MCR_DATA_TERMINAL_READY_SHIFT) & UART2_MCR_DATA_TERMINAL_READY_MASK)
#define UART2_MCR_DATA_TERMINAL_READY_VALUE_DEASSERTED         0x0U
#define UART2_MCR_DATA_TERMINAL_READY_VALUE_ASSERTED           0x1U

#define UART2_LSR_ADDR                                         (UART2_BASE + 0x0014)
#define UART2_LSR                                              (*(volatile uint32_t *)UART2_LSR_ADDR)
#define UART2_LSR_RECEIVER_FIFO_ERROR_SHIFT                    7U
#define UART2_LSR_RECEIVER_FIFO_ERROR_WIDTH                    1U
#define UART2_LSR_RECEIVER_FIFO_ERROR_MASK                     (((1U << UART2_LSR_RECEIVER_FIFO_ERROR_WIDTH) - 1U) << UART2_LSR_RECEIVER_FIFO_ERROR_SHIFT)
#define UART2_LSR_GET_RECEIVER_FIFO_ERROR(v)                   (((v) & UART2_LSR_RECEIVER_FIFO_ERROR_MASK) >> UART2_LSR_RECEIVER_FIFO_ERROR_SHIFT)
#define UART2_LSR_SET_RECEIVER_FIFO_ERROR(v)                   (((v) << UART2_LSR_RECEIVER_FIFO_ERROR_SHIFT) & UART2_LSR_RECEIVER_FIFO_ERROR_MASK)
#define UART2_LSR_RECEIVER_FIFO_ERROR_VALUE_NO_ERROR           0x0U
#define UART2_LSR_RECEIVER_FIFO_ERROR_VALUE_ERROR              0x1U

#define UART2_LSR_TRANS_EMPTY_SHIFT                            6U
#define UART2_LSR_TRANS_EMPTY_WIDTH                            1U
#define UART2_LSR_TRANS_EMPTY_MASK                             (((1U << UART2_LSR_TRANS_EMPTY_WIDTH) - 1U) << UART2_LSR_TRANS_EMPTY_SHIFT)
#define UART2_LSR_GET_TRANS_EMPTY(v)                           (((v) & UART2_LSR_TRANS_EMPTY_MASK) >> UART2_LSR_TRANS_EMPTY_SHIFT)
#define UART2_LSR_SET_TRANS_EMPTY(v)                           (((v) << UART2_LSR_TRANS_EMPTY_SHIFT) & UART2_LSR_TRANS_EMPTY_MASK)
#define UART2_LSR_TRANS_EMPTY_VALUE_EMPTY                      0x1U
#define UART2_LSR_TRANS_EMPTY_VALUE_NOT_EMPTY                  0x0U

#define UART2_LSR_TRANS_HOLD_REG_EMPTY_SHIFT                   5U
#define UART2_LSR_TRANS_HOLD_REG_EMPTY_WIDTH                   1U
#define UART2_LSR_TRANS_HOLD_REG_EMPTY_MASK                    (((1U << UART2_LSR_TRANS_HOLD_REG_EMPTY_WIDTH) - 1U) << UART2_LSR_TRANS_HOLD_REG_EMPTY_SHIFT)
#define UART2_LSR_GET_TRANS_HOLD_REG_EMPTY(v)                  (((v) & UART2_LSR_TRANS_HOLD_REG_EMPTY_MASK) >> UART2_LSR_TRANS_HOLD_REG_EMPTY_SHIFT)
#define UART2_LSR_SET_TRANS_HOLD_REG_EMPTY(v)                  (((v) << UART2_LSR_TRANS_HOLD_REG_EMPTY_SHIFT) & UART2_LSR_TRANS_HOLD_REG_EMPTY_MASK)

#define UART2_LSR_BREAK_INT_SHIFT                              4U
#define UART2_LSR_BREAK_INT_WIDTH                              1U
#define UART2_LSR_BREAK_INT_MASK                               (((1U << UART2_LSR_BREAK_INT_WIDTH) - 1U) << UART2_LSR_BREAK_INT_SHIFT)
#define UART2_LSR_GET_BREAK_INT(v)                             (((v) & UART2_LSR_BREAK_INT_MASK) >> UART2_LSR_BREAK_INT_SHIFT)
#define UART2_LSR_SET_BREAK_INT(v)                             (((v) << UART2_LSR_BREAK_INT_SHIFT) & UART2_LSR_BREAK_INT_MASK)

#define UART2_LSR_FRAMING_ERROR_SHIFT                          3U
#define UART2_LSR_FRAMING_ERROR_WIDTH                          1U
#define UART2_LSR_FRAMING_ERROR_MASK                           (((1U << UART2_LSR_FRAMING_ERROR_WIDTH) - 1U) << UART2_LSR_FRAMING_ERROR_SHIFT)
#define UART2_LSR_GET_FRAMING_ERROR(v)                         (((v) & UART2_LSR_FRAMING_ERROR_MASK) >> UART2_LSR_FRAMING_ERROR_SHIFT)
#define UART2_LSR_SET_FRAMING_ERROR(v)                         (((v) << UART2_LSR_FRAMING_ERROR_SHIFT) & UART2_LSR_FRAMING_ERROR_MASK)
#define UART2_LSR_FRAMING_ERROR_VALUE_NO_ERROR                 0x0U
#define UART2_LSR_FRAMING_ERROR_VALUE_ERROR                    0x1U

#define UART2_LSR_PARITY_ERROR_SHIFT                           2U
#define UART2_LSR_PARITY_ERROR_WIDTH                           1U
#define UART2_LSR_PARITY_ERROR_MASK                            (((1U << UART2_LSR_PARITY_ERROR_WIDTH) - 1U) << UART2_LSR_PARITY_ERROR_SHIFT)
#define UART2_LSR_GET_PARITY_ERROR(v)                          (((v) & UART2_LSR_PARITY_ERROR_MASK) >> UART2_LSR_PARITY_ERROR_SHIFT)
#define UART2_LSR_SET_PARITY_ERROR(v)                          (((v) << UART2_LSR_PARITY_ERROR_SHIFT) & UART2_LSR_PARITY_ERROR_MASK)
#define UART2_LSR_PARITY_ERROR_VALUE_NO_ERROR                  0x0U
#define UART2_LSR_PARITY_ERROR_VALUE_ERROR                     0x1U

#define UART2_LSR_OVERRUN_ERROR_SHIFT                          1U
#define UART2_LSR_OVERRUN_ERROR_WIDTH                          1U
#define UART2_LSR_OVERRUN_ERROR_MASK                           (((1U << UART2_LSR_OVERRUN_ERROR_WIDTH) - 1U) << UART2_LSR_OVERRUN_ERROR_SHIFT)
#define UART2_LSR_GET_OVERRUN_ERROR(v)                         (((v) & UART2_LSR_OVERRUN_ERROR_MASK) >> UART2_LSR_OVERRUN_ERROR_SHIFT)
#define UART2_LSR_SET_OVERRUN_ERROR(v)                         (((v) << UART2_LSR_OVERRUN_ERROR_SHIFT) & UART2_LSR_OVERRUN_ERROR_MASK)
#define UART2_LSR_OVERRUN_ERROR_VALUE_NO_ERROR                 0x0U
#define UART2_LSR_OVERRUN_ERROR_VALUE_ERROR                    0x1U

#define UART2_LSR_DATA_READY_SHIFT                             0U
#define UART2_LSR_DATA_READY_WIDTH                             1U
#define UART2_LSR_DATA_READY_MASK                              (((1U << UART2_LSR_DATA_READY_WIDTH) - 1U) << UART2_LSR_DATA_READY_SHIFT)
#define UART2_LSR_GET_DATA_READY(v)                            (((v) & UART2_LSR_DATA_READY_MASK) >> UART2_LSR_DATA_READY_SHIFT)
#define UART2_LSR_SET_DATA_READY(v)                            (((v) << UART2_LSR_DATA_READY_SHIFT) & UART2_LSR_DATA_READY_MASK)
#define UART2_LSR_DATA_READY_VALUE_NOT_READY                   0x0U
#define UART2_LSR_DATA_READY_VALUE_READY                       0x1U

#define UART2_MSR_ADDR                                         (UART2_BASE + 0x0018)
#define UART2_MSR                                              (*(volatile uint32_t *)UART2_MSR_ADDR)
#define UART2_MSR_DATA_CARRIOR_DETECT_SHIFT                    7U
#define UART2_MSR_DATA_CARRIOR_DETECT_WIDTH                    1U
#define UART2_MSR_DATA_CARRIOR_DETECT_MASK                     (((1U << UART2_MSR_DATA_CARRIOR_DETECT_WIDTH) - 1U) << UART2_MSR_DATA_CARRIOR_DETECT_SHIFT)
#define UART2_MSR_GET_DATA_CARRIOR_DETECT(v)                   (((v) & UART2_MSR_DATA_CARRIOR_DETECT_MASK) >> UART2_MSR_DATA_CARRIOR_DETECT_SHIFT)
#define UART2_MSR_SET_DATA_CARRIOR_DETECT(v)                   (((v) << UART2_MSR_DATA_CARRIOR_DETECT_SHIFT) & UART2_MSR_DATA_CARRIOR_DETECT_MASK)
#define UART2_MSR_DATA_CARRIOR_DETECT_VALUE_DEASSERTED         0x0U
#define UART2_MSR_DATA_CARRIOR_DETECT_VALUE_ASSERTED           0x1U

#define UART2_MSR_RING_INDICATOR_SHIFT                         6U
#define UART2_MSR_RING_INDICATOR_WIDTH                         1U
#define UART2_MSR_RING_INDICATOR_MASK                          (((1U << UART2_MSR_RING_INDICATOR_WIDTH) - 1U) << UART2_MSR_RING_INDICATOR_SHIFT)
#define UART2_MSR_GET_RING_INDICATOR(v)                        (((v) & UART2_MSR_RING_INDICATOR_MASK) >> UART2_MSR_RING_INDICATOR_SHIFT)
#define UART2_MSR_SET_RING_INDICATOR(v)                        (((v) << UART2_MSR_RING_INDICATOR_SHIFT) & UART2_MSR_RING_INDICATOR_MASK)
#define UART2_MSR_RING_INDICATOR_VALUE_DEASSERTED              0x0U
#define UART2_MSR_RING_INDICATOR_VALUE_ASSERTED                0x1U

#define UART2_MSR_DATA_SET_READY_SHIFT                         5U
#define UART2_MSR_DATA_SET_READY_WIDTH                         1U
#define UART2_MSR_DATA_SET_READY_MASK                          (((1U << UART2_MSR_DATA_SET_READY_WIDTH) - 1U) << UART2_MSR_DATA_SET_READY_SHIFT)
#define UART2_MSR_GET_DATA_SET_READY(v)                        (((v) & UART2_MSR_DATA_SET_READY_MASK) >> UART2_MSR_DATA_SET_READY_SHIFT)
#define UART2_MSR_SET_DATA_SET_READY(v)                        (((v) << UART2_MSR_DATA_SET_READY_SHIFT) & UART2_MSR_DATA_SET_READY_MASK)
#define UART2_MSR_DATA_SET_READY_VALUE_DEASSERTED              0x0U
#define UART2_MSR_DATA_SET_READY_VALUE_ASSERTED                0x1U

#define UART2_MSR_CLEAR_TO_SEND_SHIFT                          4U
#define UART2_MSR_CLEAR_TO_SEND_WIDTH                          1U
#define UART2_MSR_CLEAR_TO_SEND_MASK                           (((1U << UART2_MSR_CLEAR_TO_SEND_WIDTH) - 1U) << UART2_MSR_CLEAR_TO_SEND_SHIFT)
#define UART2_MSR_GET_CLEAR_TO_SEND(v)                         (((v) & UART2_MSR_CLEAR_TO_SEND_MASK) >> UART2_MSR_CLEAR_TO_SEND_SHIFT)
#define UART2_MSR_SET_CLEAR_TO_SEND(v)                         (((v) << UART2_MSR_CLEAR_TO_SEND_SHIFT) & UART2_MSR_CLEAR_TO_SEND_MASK)
#define UART2_MSR_CLEAR_TO_SEND_VALUE_DEASSERTED               0x0U
#define UART2_MSR_CLEAR_TO_SEND_VALUE_ASSERTED                 0x1U

#define UART2_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT              3U
#define UART2_MSR_DELTA_DATA_CARRIER_DETECT_WIDTH              1U
#define UART2_MSR_DELTA_DATA_CARRIER_DETECT_MASK               (((1U << UART2_MSR_DELTA_DATA_CARRIER_DETECT_WIDTH) - 1U) << UART2_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT)
#define UART2_MSR_GET_DELTA_DATA_CARRIER_DETECT(v)             (((v) & UART2_MSR_DELTA_DATA_CARRIER_DETECT_MASK) >> UART2_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT)
#define UART2_MSR_SET_DELTA_DATA_CARRIER_DETECT(v)             (((v) << UART2_MSR_DELTA_DATA_CARRIER_DETECT_SHIFT) & UART2_MSR_DELTA_DATA_CARRIER_DETECT_MASK)
#define UART2_MSR_DELTA_DATA_CARRIER_DETECT_VALUE_NO_CHANGE    0x0U
#define UART2_MSR_DELTA_DATA_CARRIER_DETECT_VALUE_CHANGE       0x1U

#define UART2_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT           2U
#define UART2_MSR_TRAILING_EDGE_RING_INDICATOR_WIDTH           1U
#define UART2_MSR_TRAILING_EDGE_RING_INDICATOR_MASK            (((1U << UART2_MSR_TRAILING_EDGE_RING_INDICATOR_WIDTH) - 1U) << UART2_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT)
#define UART2_MSR_GET_TRAILING_EDGE_RING_INDICATOR(v)          (((v) & UART2_MSR_TRAILING_EDGE_RING_INDICATOR_MASK) >> UART2_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT)
#define UART2_MSR_SET_TRAILING_EDGE_RING_INDICATOR(v)          (((v) << UART2_MSR_TRAILING_EDGE_RING_INDICATOR_SHIFT) & UART2_MSR_TRAILING_EDGE_RING_INDICATOR_MASK)
#define UART2_MSR_TRAILING_EDGE_RING_INDICATOR_VALUE_NO_CHANGE 0x0U
#define UART2_MSR_TRAILING_EDGE_RING_INDICATOR_VALUE_CHANGE    0x1U

#define UART2_MSR_DELTA_DATA_SET_READY_SHIFT                   1U
#define UART2_MSR_DELTA_DATA_SET_READY_WIDTH                   1U
#define UART2_MSR_DELTA_DATA_SET_READY_MASK                    (((1U << UART2_MSR_DELTA_DATA_SET_READY_WIDTH) - 1U) << UART2_MSR_DELTA_DATA_SET_READY_SHIFT)
#define UART2_MSR_GET_DELTA_DATA_SET_READY(v)                  (((v) & UART2_MSR_DELTA_DATA_SET_READY_MASK) >> UART2_MSR_DELTA_DATA_SET_READY_SHIFT)
#define UART2_MSR_SET_DELTA_DATA_SET_READY(v)                  (((v) << UART2_MSR_DELTA_DATA_SET_READY_SHIFT) & UART2_MSR_DELTA_DATA_SET_READY_MASK)
#define UART2_MSR_DELTA_DATA_SET_READY_VALUE_NO_CHANGE         0x0U
#define UART2_MSR_DELTA_DATA_SET_READY_VALUE_CHANGE            0x1U

#define UART2_MSR_DELTA_CLEAR_TO_SEND_SHIFT                    0U
#define UART2_MSR_DELTA_CLEAR_TO_SEND_WIDTH                    1U
#define UART2_MSR_DELTA_CLEAR_TO_SEND_MASK                     (((1U << UART2_MSR_DELTA_CLEAR_TO_SEND_WIDTH) - 1U) << UART2_MSR_DELTA_CLEAR_TO_SEND_SHIFT)
#define UART2_MSR_GET_DELTA_CLEAR_TO_SEND(v)                   (((v) & UART2_MSR_DELTA_CLEAR_TO_SEND_MASK) >> UART2_MSR_DELTA_CLEAR_TO_SEND_SHIFT)
#define UART2_MSR_SET_DELTA_CLEAR_TO_SEND(v)                   (((v) << UART2_MSR_DELTA_CLEAR_TO_SEND_SHIFT) & UART2_MSR_DELTA_CLEAR_TO_SEND_MASK)
#define UART2_MSR_DELTA_CLEAR_TO_SEND_VALUE_NO_CHANGE          0x0U
#define UART2_MSR_DELTA_CLEAR_TO_SEND_VALUE_CHANGE             0x1U

#define UART2_SCR_ADDR                                         (UART2_BASE + 0x001C)
#define UART2_SCR                                              (*(volatile uint32_t *)UART2_SCR_ADDR)
#define UART2_SCR_TEMP_STORE_SPACE_SHIFT                       0U
#define UART2_SCR_TEMP_STORE_SPACE_WIDTH                       8U
#define UART2_SCR_TEMP_STORE_SPACE_MASK                        (((1U << UART2_SCR_TEMP_STORE_SPACE_WIDTH) - 1U) << UART2_SCR_TEMP_STORE_SPACE_SHIFT)
#define UART2_SCR_GET_TEMP_STORE_SPACE(v)                      (((v) & UART2_SCR_TEMP_STORE_SPACE_MASK) >> UART2_SCR_TEMP_STORE_SPACE_SHIFT)
#define UART2_SCR_SET_TEMP_STORE_SPACE(v)                      (((v) << UART2_SCR_TEMP_STORE_SPACE_SHIFT) & UART2_SCR_TEMP_STORE_SPACE_MASK)

#define UART2_SRBR_ADDR                                        (UART2_BASE + 0x0030)
#define UART2_SRBR                                             (*(volatile uint32_t *)UART2_SRBR_ADDR)
#define UART2_SRBR_SHADOW_RBR_SHIFT                            0U
#define UART2_SRBR_SHADOW_RBR_WIDTH                            8U
#define UART2_SRBR_SHADOW_RBR_MASK                             (((1U << UART2_SRBR_SHADOW_RBR_WIDTH) - 1U) << UART2_SRBR_SHADOW_RBR_SHIFT)
#define UART2_SRBR_GET_SHADOW_RBR(v)                           (((v) & UART2_SRBR_SHADOW_RBR_MASK) >> UART2_SRBR_SHADOW_RBR_SHIFT)
#define UART2_SRBR_SET_SHADOW_RBR(v)                           (((v) << UART2_SRBR_SHADOW_RBR_SHIFT) & UART2_SRBR_SHADOW_RBR_MASK)

#define UART2_STHR_ADDR                                        (UART2_BASE + 0x0030)
#define UART2_STHR                                             (*(volatile uint32_t *)UART2_STHR_ADDR)
#define UART2_STHR_SHADOW_THR_SHIFT                            0U
#define UART2_STHR_SHADOW_THR_WIDTH                            8U
#define UART2_STHR_SHADOW_THR_MASK                             (((1U << UART2_STHR_SHADOW_THR_WIDTH) - 1U) << UART2_STHR_SHADOW_THR_SHIFT)
#define UART2_STHR_GET_SHADOW_THR(v)                           (((v) & UART2_STHR_SHADOW_THR_MASK) >> UART2_STHR_SHADOW_THR_SHIFT)
#define UART2_STHR_SET_SHADOW_THR(v)                           (((v) << UART2_STHR_SHADOW_THR_SHIFT) & UART2_STHR_SHADOW_THR_MASK)

#define UART2_FAR_ADDR                                         (UART2_BASE + 0x0070)
#define UART2_FAR                                              (*(volatile uint32_t *)UART2_FAR_ADDR)
#define UART2_FAR_FIFO_ACCESS_TEST_EN_SHIFT                    0U
#define UART2_FAR_FIFO_ACCESS_TEST_EN_WIDTH                    1U
#define UART2_FAR_FIFO_ACCESS_TEST_EN_MASK                     (((1U << UART2_FAR_FIFO_ACCESS_TEST_EN_WIDTH) - 1U) << UART2_FAR_FIFO_ACCESS_TEST_EN_SHIFT)
#define UART2_FAR_GET_FIFO_ACCESS_TEST_EN(v)                   (((v) & UART2_FAR_FIFO_ACCESS_TEST_EN_MASK) >> UART2_FAR_FIFO_ACCESS_TEST_EN_SHIFT)
#define UART2_FAR_SET_FIFO_ACCESS_TEST_EN(v)                   (((v) << UART2_FAR_FIFO_ACCESS_TEST_EN_SHIFT) & UART2_FAR_FIFO_ACCESS_TEST_EN_MASK)
#define UART2_FAR_FIFO_ACCESS_TEST_EN_VALUE_DISABLED           0x0U
#define UART2_FAR_FIFO_ACCESS_TEST_EN_VALUE_ENABLED            0x1U

#define UART2_TFR_ADDR                                         (UART2_BASE + 0x0074)
#define UART2_TFR                                              (*(volatile uint32_t *)UART2_TFR_ADDR)
#define UART2_TFR_TRANS_FIFO_READ_SHIFT                        0U
#define UART2_TFR_TRANS_FIFO_READ_WIDTH                        8U
#define UART2_TFR_TRANS_FIFO_READ_MASK                         (((1U << UART2_TFR_TRANS_FIFO_READ_WIDTH) - 1U) << UART2_TFR_TRANS_FIFO_READ_SHIFT)
#define UART2_TFR_GET_TRANS_FIFO_READ(v)                       (((v) & UART2_TFR_TRANS_FIFO_READ_MASK) >> UART2_TFR_TRANS_FIFO_READ_SHIFT)
#define UART2_TFR_SET_TRANS_FIFO_READ(v)                       (((v) << UART2_TFR_TRANS_FIFO_READ_SHIFT) & UART2_TFR_TRANS_FIFO_READ_MASK)

#define UART2_RFW_ADDR                                         (UART2_BASE + 0x0078)
#define UART2_RFW                                              (*(volatile uint32_t *)UART2_RFW_ADDR)
#define UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT             9U
#define UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_WIDTH             1U
#define UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK              (((1U << UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_WIDTH) - 1U) << UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT)
#define UART2_RFW_GET_RECEIVE_FIFO_FRAMING_ERROR(v)            (((v) & UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK) >> UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT)
#define UART2_RFW_SET_RECEIVE_FIFO_FRAMING_ERROR(v)            (((v) << UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_SHIFT) & UART2_RFW_RECEIVE_FIFO_FRAMING_ERROR_MASK)

#define UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT              8U
#define UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_WIDTH              1U
#define UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK               (((1U << UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_WIDTH) - 1U) << UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT)
#define UART2_RFW_GET_RECEIVE_FIFO_PARITY_ERROR(v)             (((v) & UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK) >> UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT)
#define UART2_RFW_SET_RECEIVE_FIFO_PARITY_ERROR(v)             (((v) << UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_SHIFT) & UART2_RFW_RECEIVE_FIFO_PARITY_ERROR_MASK)

#define UART2_RFW_RECEIVE_FIFO_WRITE_SHIFT                     0U
#define UART2_RFW_RECEIVE_FIFO_WRITE_WIDTH                     8U
#define UART2_RFW_RECEIVE_FIFO_WRITE_MASK                      (((1U << UART2_RFW_RECEIVE_FIFO_WRITE_WIDTH) - 1U) << UART2_RFW_RECEIVE_FIFO_WRITE_SHIFT)
#define UART2_RFW_GET_RECEIVE_FIFO_WRITE(v)                    (((v) & UART2_RFW_RECEIVE_FIFO_WRITE_MASK) >> UART2_RFW_RECEIVE_FIFO_WRITE_SHIFT)
#define UART2_RFW_SET_RECEIVE_FIFO_WRITE(v)                    (((v) << UART2_RFW_RECEIVE_FIFO_WRITE_SHIFT) & UART2_RFW_RECEIVE_FIFO_WRITE_MASK)

#define UART2_USR_ADDR                                         (UART2_BASE + 0x007C)
#define UART2_USR                                              (*(volatile uint32_t *)UART2_USR_ADDR)
#define UART2_USR_RECEIVE_FIFO_FULL_SHIFT                      4U
#define UART2_USR_RECEIVE_FIFO_FULL_WIDTH                      1U
#define UART2_USR_RECEIVE_FIFO_FULL_MASK                       (((1U << UART2_USR_RECEIVE_FIFO_FULL_WIDTH) - 1U) << UART2_USR_RECEIVE_FIFO_FULL_SHIFT)
#define UART2_USR_GET_RECEIVE_FIFO_FULL(v)                     (((v) & UART2_USR_RECEIVE_FIFO_FULL_MASK) >> UART2_USR_RECEIVE_FIFO_FULL_SHIFT)
#define UART2_USR_SET_RECEIVE_FIFO_FULL(v)                     (((v) << UART2_USR_RECEIVE_FIFO_FULL_SHIFT) & UART2_USR_RECEIVE_FIFO_FULL_MASK)
#define UART2_USR_RECEIVE_FIFO_FULL_VALUE_NOT_FULL             0x0U
#define UART2_USR_RECEIVE_FIFO_FULL_VALUE_FULL                 0x1U

#define UART2_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT                 3U
#define UART2_USR_RECEIVE_FIFO_NOT_EMPTY_WIDTH                 1U
#define UART2_USR_RECEIVE_FIFO_NOT_EMPTY_MASK                  (((1U << UART2_USR_RECEIVE_FIFO_NOT_EMPTY_WIDTH) - 1U) << UART2_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT)
#define UART2_USR_GET_RECEIVE_FIFO_NOT_EMPTY(v)                (((v) & UART2_USR_RECEIVE_FIFO_NOT_EMPTY_MASK) >> UART2_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT)
#define UART2_USR_SET_RECEIVE_FIFO_NOT_EMPTY(v)                (((v) << UART2_USR_RECEIVE_FIFO_NOT_EMPTY_SHIFT) & UART2_USR_RECEIVE_FIFO_NOT_EMPTY_MASK)
#define UART2_USR_RECEIVE_FIFO_NOT_EMPTY_VALUE_EMPTY           0x0U
#define UART2_USR_RECEIVE_FIFO_NOT_EMPTY_VALUE_NOT_EMPTY       0x1U

#define UART2_USR_TRASN_FIFO_EMPTY_SHIFT                       2U
#define UART2_USR_TRASN_FIFO_EMPTY_WIDTH                       1U
#define UART2_USR_TRASN_FIFO_EMPTY_MASK                        (((1U << UART2_USR_TRASN_FIFO_EMPTY_WIDTH) - 1U) << UART2_USR_TRASN_FIFO_EMPTY_SHIFT)
#define UART2_USR_GET_TRASN_FIFO_EMPTY(v)                      (((v) & UART2_USR_TRASN_FIFO_EMPTY_MASK) >> UART2_USR_TRASN_FIFO_EMPTY_SHIFT)
#define UART2_USR_SET_TRASN_FIFO_EMPTY(v)                      (((v) << UART2_USR_TRASN_FIFO_EMPTY_SHIFT) & UART2_USR_TRASN_FIFO_EMPTY_MASK)
#define UART2_USR_TRASN_FIFO_EMPTY_VALUE_NOT_EMPTY             0x0U
#define UART2_USR_TRASN_FIFO_EMPTY_VALUE_EMPTY                 0x1U

#define UART2_USR_TRANS_FIFO_NOT_FULL_SHIFT                    1U
#define UART2_USR_TRANS_FIFO_NOT_FULL_WIDTH                    1U
#define UART2_USR_TRANS_FIFO_NOT_FULL_MASK                     (((1U << UART2_USR_TRANS_FIFO_NOT_FULL_WIDTH) - 1U) << UART2_USR_TRANS_FIFO_NOT_FULL_SHIFT)
#define UART2_USR_GET_TRANS_FIFO_NOT_FULL(v)                   (((v) & UART2_USR_TRANS_FIFO_NOT_FULL_MASK) >> UART2_USR_TRANS_FIFO_NOT_FULL_SHIFT)
#define UART2_USR_SET_TRANS_FIFO_NOT_FULL(v)                   (((v) << UART2_USR_TRANS_FIFO_NOT_FULL_SHIFT) & UART2_USR_TRANS_FIFO_NOT_FULL_MASK)
#define UART2_USR_TRANS_FIFO_NOT_FULL_VALUE_FULL               0x0U
#define UART2_USR_TRANS_FIFO_NOT_FULL_VALUE_NOT_FULL           0x1U

#define UART2_USR_UART_BUSY_SHIFT                              0U
#define UART2_USR_UART_BUSY_WIDTH                              1U
#define UART2_USR_UART_BUSY_MASK                               (((1U << UART2_USR_UART_BUSY_WIDTH) - 1U) << UART2_USR_UART_BUSY_SHIFT)
#define UART2_USR_GET_UART_BUSY(v)                             (((v) & UART2_USR_UART_BUSY_MASK) >> UART2_USR_UART_BUSY_SHIFT)
#define UART2_USR_SET_UART_BUSY(v)                             (((v) << UART2_USR_UART_BUSY_SHIFT) & UART2_USR_UART_BUSY_MASK)
#define UART2_USR_UART_BUSY_VALUE_IDLE                         0x0U
#define UART2_USR_UART_BUSY_VALUE_BUSY                         0x1U

#define UART2_TFL_ADDR                                         (UART2_BASE + 0x0080)
#define UART2_TFL                                              (*(volatile uint32_t *)UART2_TFL_ADDR)
#define UART2_TFL_TRANS_FIFO_LEVEL_SHIFT                       0U
#define UART2_TFL_TRANS_FIFO_LEVEL_WIDTH                       6U
#define UART2_TFL_TRANS_FIFO_LEVEL_MASK                        (((1U << UART2_TFL_TRANS_FIFO_LEVEL_WIDTH) - 1U) << UART2_TFL_TRANS_FIFO_LEVEL_SHIFT)
#define UART2_TFL_GET_TRANS_FIFO_LEVEL(v)                      (((v) & UART2_TFL_TRANS_FIFO_LEVEL_MASK) >> UART2_TFL_TRANS_FIFO_LEVEL_SHIFT)
#define UART2_TFL_SET_TRANS_FIFO_LEVEL(v)                      (((v) << UART2_TFL_TRANS_FIFO_LEVEL_SHIFT) & UART2_TFL_TRANS_FIFO_LEVEL_MASK)

#define UART2_RFL_ADDR                                         (UART2_BASE + 0x0084)
#define UART2_RFL                                              (*(volatile uint32_t *)UART2_RFL_ADDR)
#define UART2_RFL_RECEIVE_FIFO_LEVEL_SHIFT                     0U
#define UART2_RFL_RECEIVE_FIFO_LEVEL_WIDTH                     6U
#define UART2_RFL_RECEIVE_FIFO_LEVEL_MASK                      (((1U << UART2_RFL_RECEIVE_FIFO_LEVEL_WIDTH) - 1U) << UART2_RFL_RECEIVE_FIFO_LEVEL_SHIFT)
#define UART2_RFL_GET_RECEIVE_FIFO_LEVEL(v)                    (((v) & UART2_RFL_RECEIVE_FIFO_LEVEL_MASK) >> UART2_RFL_RECEIVE_FIFO_LEVEL_SHIFT)
#define UART2_RFL_SET_RECEIVE_FIFO_LEVEL(v)                    (((v) << UART2_RFL_RECEIVE_FIFO_LEVEL_SHIFT) & UART2_RFL_RECEIVE_FIFO_LEVEL_MASK)

#define UART2_SRR_ADDR                                         (UART2_BASE + 0x0088)
#define UART2_SRR                                              (*(volatile uint32_t *)UART2_SRR_ADDR)
#define UART2_SRR_XMIT_FIFO_RESET_SHIFT                        2U
#define UART2_SRR_XMIT_FIFO_RESET_WIDTH                        1U
#define UART2_SRR_XMIT_FIFO_RESET_MASK                         (((1U << UART2_SRR_XMIT_FIFO_RESET_WIDTH) - 1U) << UART2_SRR_XMIT_FIFO_RESET_SHIFT)
#define UART2_SRR_GET_XMIT_FIFO_RESET(v)                       (((v) & UART2_SRR_XMIT_FIFO_RESET_MASK) >> UART2_SRR_XMIT_FIFO_RESET_SHIFT)
#define UART2_SRR_SET_XMIT_FIFO_RESET(v)                       (((v) << UART2_SRR_XMIT_FIFO_RESET_SHIFT) & UART2_SRR_XMIT_FIFO_RESET_MASK)

#define UART2_SRR_RCVR_FIFO_RESET_SHIFT                        1U
#define UART2_SRR_RCVR_FIFO_RESET_WIDTH                        1U
#define UART2_SRR_RCVR_FIFO_RESET_MASK                         (((1U << UART2_SRR_RCVR_FIFO_RESET_WIDTH) - 1U) << UART2_SRR_RCVR_FIFO_RESET_SHIFT)
#define UART2_SRR_GET_RCVR_FIFO_RESET(v)                       (((v) & UART2_SRR_RCVR_FIFO_RESET_MASK) >> UART2_SRR_RCVR_FIFO_RESET_SHIFT)
#define UART2_SRR_SET_RCVR_FIFO_RESET(v)                       (((v) << UART2_SRR_RCVR_FIFO_RESET_SHIFT) & UART2_SRR_RCVR_FIFO_RESET_MASK)

#define UART2_SRR_UART_RESET_SHIFT                             0U
#define UART2_SRR_UART_RESET_WIDTH                             1U
#define UART2_SRR_UART_RESET_MASK                              (((1U << UART2_SRR_UART_RESET_WIDTH) - 1U) << UART2_SRR_UART_RESET_SHIFT)
#define UART2_SRR_GET_UART_RESET(v)                            (((v) & UART2_SRR_UART_RESET_MASK) >> UART2_SRR_UART_RESET_SHIFT)
#define UART2_SRR_SET_UART_RESET(v)                            (((v) << UART2_SRR_UART_RESET_SHIFT) & UART2_SRR_UART_RESET_MASK)

#define UART2_SRTS_ADDR                                        (UART2_BASE + 0x008C)
#define UART2_SRTS                                             (*(volatile uint32_t *)UART2_SRTS_ADDR)
#define UART2_SRTS_SHADOW_REQ_TO_SEND_SHIFT                    0U
#define UART2_SRTS_SHADOW_REQ_TO_SEND_WIDTH                    1U
#define UART2_SRTS_SHADOW_REQ_TO_SEND_MASK                     (((1U << UART2_SRTS_SHADOW_REQ_TO_SEND_WIDTH) - 1U) << UART2_SRTS_SHADOW_REQ_TO_SEND_SHIFT)
#define UART2_SRTS_GET_SHADOW_REQ_TO_SEND(v)                   (((v) & UART2_SRTS_SHADOW_REQ_TO_SEND_MASK) >> UART2_SRTS_SHADOW_REQ_TO_SEND_SHIFT)
#define UART2_SRTS_SET_SHADOW_REQ_TO_SEND(v)                   (((v) << UART2_SRTS_SHADOW_REQ_TO_SEND_SHIFT) & UART2_SRTS_SHADOW_REQ_TO_SEND_MASK)

#define UART2_SBCR_ADDR                                        (UART2_BASE + 0x0090)
#define UART2_SBCR                                             (*(volatile uint32_t *)UART2_SBCR_ADDR)
#define UART2_SBCR_SHADOW_BREAK_CTRL_SHIFT                     0U
#define UART2_SBCR_SHADOW_BREAK_CTRL_WIDTH                     1U
#define UART2_SBCR_SHADOW_BREAK_CTRL_MASK                      (((1U << UART2_SBCR_SHADOW_BREAK_CTRL_WIDTH) - 1U) << UART2_SBCR_SHADOW_BREAK_CTRL_SHIFT)
#define UART2_SBCR_GET_SHADOW_BREAK_CTRL(v)                    (((v) & UART2_SBCR_SHADOW_BREAK_CTRL_MASK) >> UART2_SBCR_SHADOW_BREAK_CTRL_SHIFT)
#define UART2_SBCR_SET_SHADOW_BREAK_CTRL(v)                    (((v) << UART2_SBCR_SHADOW_BREAK_CTRL_SHIFT) & UART2_SBCR_SHADOW_BREAK_CTRL_MASK)

#define UART2_SDMAM_ADDR                                       (UART2_BASE + 0x0094)
#define UART2_SDMAM                                            (*(volatile uint32_t *)UART2_SDMAM_ADDR)
#define UART2_SDMAM_SHADOW_DMA_MODE_SHIFT                      0U
#define UART2_SDMAM_SHADOW_DMA_MODE_WIDTH                      1U
#define UART2_SDMAM_SHADOW_DMA_MODE_MASK                       (((1U << UART2_SDMAM_SHADOW_DMA_MODE_WIDTH) - 1U) << UART2_SDMAM_SHADOW_DMA_MODE_SHIFT)
#define UART2_SDMAM_GET_SHADOW_DMA_MODE(v)                     (((v) & UART2_SDMAM_SHADOW_DMA_MODE_MASK) >> UART2_SDMAM_SHADOW_DMA_MODE_SHIFT)
#define UART2_SDMAM_SET_SHADOW_DMA_MODE(v)                     (((v) << UART2_SDMAM_SHADOW_DMA_MODE_SHIFT) & UART2_SDMAM_SHADOW_DMA_MODE_MASK)
#define UART2_SDMAM_SHADOW_DMA_MODE_VALUE_MODE_0               0x0U
#define UART2_SDMAM_SHADOW_DMA_MODE_VALUE_MODE_1               0x1U

#define UART2_SFE_ADDR                                         (UART2_BASE + 0x0098)
#define UART2_SFE                                              (*(volatile uint32_t *)UART2_SFE_ADDR)
#define UART2_SFE_SHADOW_FIFO_EN_SHIFT                         0U
#define UART2_SFE_SHADOW_FIFO_EN_WIDTH                         1U
#define UART2_SFE_SHADOW_FIFO_EN_MASK                          (((1U << UART2_SFE_SHADOW_FIFO_EN_WIDTH) - 1U) << UART2_SFE_SHADOW_FIFO_EN_SHIFT)
#define UART2_SFE_GET_SHADOW_FIFO_EN(v)                        (((v) & UART2_SFE_SHADOW_FIFO_EN_MASK) >> UART2_SFE_SHADOW_FIFO_EN_SHIFT)
#define UART2_SFE_SET_SHADOW_FIFO_EN(v)                        (((v) << UART2_SFE_SHADOW_FIFO_EN_SHIFT) & UART2_SFE_SHADOW_FIFO_EN_MASK)
#define UART2_SFE_SHADOW_FIFO_EN_VALUE_ENABLE                  0x1U
#define UART2_SFE_SHADOW_FIFO_EN_VALUE_DISABLE                 0x0U

#define UART2_SRT_ADDR                                         (UART2_BASE + 0x009C)
#define UART2_SRT                                              (*(volatile uint32_t *)UART2_SRT_ADDR)
#define UART2_SRT_SHADOW_RCVR_TRIGGER_SHIFT                    0U
#define UART2_SRT_SHADOW_RCVR_TRIGGER_WIDTH                    2U
#define UART2_SRT_SHADOW_RCVR_TRIGGER_MASK                     (((1U << UART2_SRT_SHADOW_RCVR_TRIGGER_WIDTH) - 1U) << UART2_SRT_SHADOW_RCVR_TRIGGER_SHIFT)
#define UART2_SRT_GET_SHADOW_RCVR_TRIGGER(v)                   (((v) & UART2_SRT_SHADOW_RCVR_TRIGGER_MASK) >> UART2_SRT_SHADOW_RCVR_TRIGGER_SHIFT)
#define UART2_SRT_SET_SHADOW_RCVR_TRIGGER(v)                   (((v) << UART2_SRT_SHADOW_RCVR_TRIGGER_SHIFT) & UART2_SRT_SHADOW_RCVR_TRIGGER_MASK)
#define UART2_SRT_SHADOW_RCVR_TRIGGER_VALUE_1CHAR              0x0U
#define UART2_SRT_SHADOW_RCVR_TRIGGER_VALUE_QUARTER_FULL       0x1U
#define UART2_SRT_SHADOW_RCVR_TRIGGER_VALUE_HALF_FULL          0x2U
#define UART2_SRT_SHADOW_RCVR_TRIGGER_VALUE_ALMOST_FULL        0x3U

#define UART2_STET_ADDR                                        (UART2_BASE + 0x00A0)
#define UART2_STET                                             (*(volatile uint32_t *)UART2_STET_ADDR)
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT               0U
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_WIDTH               2U
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_MASK                (((1U << UART2_STET_SHADOW_TX_EMPTY_TRIGGER_WIDTH) - 1U) << UART2_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT)
#define UART2_STET_GET_SHADOW_TX_EMPTY_TRIGGER(v)              (((v) & UART2_STET_SHADOW_TX_EMPTY_TRIGGER_MASK) >> UART2_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT)
#define UART2_STET_SET_SHADOW_TX_EMPTY_TRIGGER(v)              (((v) << UART2_STET_SHADOW_TX_EMPTY_TRIGGER_SHIFT) & UART2_STET_SHADOW_TX_EMPTY_TRIGGER_MASK)
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_EMPTY         0x0U
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_2CHARS        0x1U
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_QUARTER_FULL  0x2U
#define UART2_STET_SHADOW_TX_EMPTY_TRIGGER_VALUE_HALF_FULL     0x3U

#define UART2_HTX_ADDR                                         (UART2_BASE + 0x00A4)
#define UART2_HTX                                              (*(volatile uint32_t *)UART2_HTX_ADDR)
#define UART2_HTX_HALT_TX_EN_SHIFT                             0U
#define UART2_HTX_HALT_TX_EN_WIDTH                             1U
#define UART2_HTX_HALT_TX_EN_MASK                              (((1U << UART2_HTX_HALT_TX_EN_WIDTH) - 1U) << UART2_HTX_HALT_TX_EN_SHIFT)
#define UART2_HTX_GET_HALT_TX_EN(v)                            (((v) & UART2_HTX_HALT_TX_EN_MASK) >> UART2_HTX_HALT_TX_EN_SHIFT)
#define UART2_HTX_SET_HALT_TX_EN(v)                            (((v) << UART2_HTX_HALT_TX_EN_SHIFT) & UART2_HTX_HALT_TX_EN_MASK)
#define UART2_HTX_HALT_TX_EN_VALUE_DISABLED                    0x0U
#define UART2_HTX_HALT_TX_EN_VALUE_ENABLED                     0x1U

#define UART2_DMASA_ADDR                                       (UART2_BASE + 0x00A8)
#define UART2_DMASA                                            (*(volatile uint32_t *)UART2_DMASA_ADDR)
#define UART2_DMASA_DMA_SOFTWARE_ACK_SHIFT                     0U
#define UART2_DMASA_DMA_SOFTWARE_ACK_WIDTH                     1U
#define UART2_DMASA_DMA_SOFTWARE_ACK_MASK                      (((1U << UART2_DMASA_DMA_SOFTWARE_ACK_WIDTH) - 1U) << UART2_DMASA_DMA_SOFTWARE_ACK_SHIFT)
#define UART2_DMASA_GET_DMA_SOFTWARE_ACK(v)                    (((v) & UART2_DMASA_DMA_SOFTWARE_ACK_MASK) >> UART2_DMASA_DMA_SOFTWARE_ACK_SHIFT)
#define UART2_DMASA_SET_DMA_SOFTWARE_ACK(v)                    (((v) << UART2_DMASA_DMA_SOFTWARE_ACK_SHIFT) & UART2_DMASA_DMA_SOFTWARE_ACK_MASK)

#define UART2_CPR_ADDR                                         (UART2_BASE + 0x00F4)
#define UART2_CPR                                              (*(volatile uint32_t *)UART2_CPR_ADDR)
#define UART2_CPR_FIFO_MODE_SHIFT                              16U
#define UART2_CPR_FIFO_MODE_WIDTH                              8U
#define UART2_CPR_FIFO_MODE_MASK                               (((1U << UART2_CPR_FIFO_MODE_WIDTH) - 1U) << UART2_CPR_FIFO_MODE_SHIFT)
#define UART2_CPR_GET_FIFO_MODE(v)                             (((v) & UART2_CPR_FIFO_MODE_MASK) >> UART2_CPR_FIFO_MODE_SHIFT)
#define UART2_CPR_SET_FIFO_MODE(v)                             (((v) << UART2_CPR_FIFO_MODE_SHIFT) & UART2_CPR_FIFO_MODE_MASK)
#define UART2_CPR_FIFO_MODE_VALUE_MODE_64                      0x4U

#define UART2_CPR_DMA_EXTRA_SHIFT                              13U
#define UART2_CPR_DMA_EXTRA_WIDTH                              1U
#define UART2_CPR_DMA_EXTRA_MASK                               (((1U << UART2_CPR_DMA_EXTRA_WIDTH) - 1U) << UART2_CPR_DMA_EXTRA_SHIFT)
#define UART2_CPR_GET_DMA_EXTRA(v)                             (((v) & UART2_CPR_DMA_EXTRA_MASK) >> UART2_CPR_DMA_EXTRA_SHIFT)
#define UART2_CPR_SET_DMA_EXTRA(v)                             (((v) << UART2_CPR_DMA_EXTRA_SHIFT) & UART2_CPR_DMA_EXTRA_MASK)
#define UART2_CPR_DMA_EXTRA_VALUE_ENABLED                      0x1U
#define UART2_CPR_DMA_EXTRA_VALUE_DISABLED                     0x0U

#define UART2_CPR_UART_ADD_ENCODED_PARAMS_SHIFT                12U
#define UART2_CPR_UART_ADD_ENCODED_PARAMS_WIDTH                1U
#define UART2_CPR_UART_ADD_ENCODED_PARAMS_MASK                 (((1U << UART2_CPR_UART_ADD_ENCODED_PARAMS_WIDTH) - 1U) << UART2_CPR_UART_ADD_ENCODED_PARAMS_SHIFT)
#define UART2_CPR_GET_UART_ADD_ENCODED_PARAMS(v)               (((v) & UART2_CPR_UART_ADD_ENCODED_PARAMS_MASK) >> UART2_CPR_UART_ADD_ENCODED_PARAMS_SHIFT)
#define UART2_CPR_SET_UART_ADD_ENCODED_PARAMS(v)               (((v) << UART2_CPR_UART_ADD_ENCODED_PARAMS_SHIFT) & UART2_CPR_UART_ADD_ENCODED_PARAMS_MASK)
#define UART2_CPR_UART_ADD_ENCODED_PARAMS_VALUE_ENABLED        0x1U
#define UART2_CPR_UART_ADD_ENCODED_PARAMS_VALUE_DISABLED       0x0U

#define UART2_CPR_SHADOW_SHIFT                                 11U
#define UART2_CPR_SHADOW_WIDTH                                 1U
#define UART2_CPR_SHADOW_MASK                                  (((1U << UART2_CPR_SHADOW_WIDTH) - 1U) << UART2_CPR_SHADOW_SHIFT)
#define UART2_CPR_GET_SHADOW(v)                                (((v) & UART2_CPR_SHADOW_MASK) >> UART2_CPR_SHADOW_SHIFT)
#define UART2_CPR_SET_SHADOW(v)                                (((v) << UART2_CPR_SHADOW_SHIFT) & UART2_CPR_SHADOW_MASK)
#define UART2_CPR_SHADOW_VALUE_ENABLED                         0x1U
#define UART2_CPR_SHADOW_VALUE_DISABLED                        0x0U

#define UART2_CPR_FIFO_STAT_SHIFT                              10U
#define UART2_CPR_FIFO_STAT_WIDTH                              1U
#define UART2_CPR_FIFO_STAT_MASK                               (((1U << UART2_CPR_FIFO_STAT_WIDTH) - 1U) << UART2_CPR_FIFO_STAT_SHIFT)
#define UART2_CPR_GET_FIFO_STAT(v)                             (((v) & UART2_CPR_FIFO_STAT_MASK) >> UART2_CPR_FIFO_STAT_SHIFT)
#define UART2_CPR_SET_FIFO_STAT(v)                             (((v) << UART2_CPR_FIFO_STAT_SHIFT) & UART2_CPR_FIFO_STAT_MASK)
#define UART2_CPR_FIFO_STAT_VALUE_ENABLED                      0x1U
#define UART2_CPR_FIFO_STAT_VALUE_DISABLED                     0x0U

#define UART2_CPR_FIFO_ACCESS_SHIFT                            9U
#define UART2_CPR_FIFO_ACCESS_WIDTH                            1U
#define UART2_CPR_FIFO_ACCESS_MASK                             (((1U << UART2_CPR_FIFO_ACCESS_WIDTH) - 1U) << UART2_CPR_FIFO_ACCESS_SHIFT)
#define UART2_CPR_GET_FIFO_ACCESS(v)                           (((v) & UART2_CPR_FIFO_ACCESS_MASK) >> UART2_CPR_FIFO_ACCESS_SHIFT)
#define UART2_CPR_SET_FIFO_ACCESS(v)                           (((v) << UART2_CPR_FIFO_ACCESS_SHIFT) & UART2_CPR_FIFO_ACCESS_MASK)
#define UART2_CPR_FIFO_ACCESS_VALUE_ENABLED                    0x1U
#define UART2_CPR_FIFO_ACCESS_VALUE_DISABLED                   0x0U

#define UART2_CPR_NEW_FEAT_SHIFT                               8U
#define UART2_CPR_NEW_FEAT_WIDTH                               1U
#define UART2_CPR_NEW_FEAT_MASK                                (((1U << UART2_CPR_NEW_FEAT_WIDTH) - 1U) << UART2_CPR_NEW_FEAT_SHIFT)
#define UART2_CPR_GET_NEW_FEAT(v)                              (((v) & UART2_CPR_NEW_FEAT_MASK) >> UART2_CPR_NEW_FEAT_SHIFT)
#define UART2_CPR_SET_NEW_FEAT(v)                              (((v) << UART2_CPR_NEW_FEAT_SHIFT) & UART2_CPR_NEW_FEAT_MASK)
#define UART2_CPR_NEW_FEAT_VALUE_ENABLED                       0x1U
#define UART2_CPR_NEW_FEAT_VALUE_DISABLED                      0x0U

#define UART2_CPR_SIR_LP_MODE_SHIFT                            7U
#define UART2_CPR_SIR_LP_MODE_WIDTH                            1U
#define UART2_CPR_SIR_LP_MODE_MASK                             (((1U << UART2_CPR_SIR_LP_MODE_WIDTH) - 1U) << UART2_CPR_SIR_LP_MODE_SHIFT)
#define UART2_CPR_GET_SIR_LP_MODE(v)                           (((v) & UART2_CPR_SIR_LP_MODE_MASK) >> UART2_CPR_SIR_LP_MODE_SHIFT)
#define UART2_CPR_SET_SIR_LP_MODE(v)                           (((v) << UART2_CPR_SIR_LP_MODE_SHIFT) & UART2_CPR_SIR_LP_MODE_MASK)
#define UART2_CPR_SIR_LP_MODE_VALUE_ENABLED                    0x1U
#define UART2_CPR_SIR_LP_MODE_VALUE_DISABLED                   0x0U

#define UART2_CPR_SIR_MODE_SHIFT                               6U
#define UART2_CPR_SIR_MODE_WIDTH                               1U
#define UART2_CPR_SIR_MODE_MASK                                (((1U << UART2_CPR_SIR_MODE_WIDTH) - 1U) << UART2_CPR_SIR_MODE_SHIFT)
#define UART2_CPR_GET_SIR_MODE(v)                              (((v) & UART2_CPR_SIR_MODE_MASK) >> UART2_CPR_SIR_MODE_SHIFT)
#define UART2_CPR_SET_SIR_MODE(v)                              (((v) << UART2_CPR_SIR_MODE_SHIFT) & UART2_CPR_SIR_MODE_MASK)
#define UART2_CPR_SIR_MODE_VALUE_ENABLED                       0x1U
#define UART2_CPR_SIR_MODE_VALUE_DISABLED                      0x0U

#define UART2_CPR_THRE_MODE_SHIFT                              5U
#define UART2_CPR_THRE_MODE_WIDTH                              1U
#define UART2_CPR_THRE_MODE_MASK                               (((1U << UART2_CPR_THRE_MODE_WIDTH) - 1U) << UART2_CPR_THRE_MODE_SHIFT)
#define UART2_CPR_GET_THRE_MODE(v)                             (((v) & UART2_CPR_THRE_MODE_MASK) >> UART2_CPR_THRE_MODE_SHIFT)
#define UART2_CPR_SET_THRE_MODE(v)                             (((v) << UART2_CPR_THRE_MODE_SHIFT) & UART2_CPR_THRE_MODE_MASK)
#define UART2_CPR_THRE_MODE_VALUE_ENABLED                      0x1U
#define UART2_CPR_THRE_MODE_VALUE_DISABLED                     0x0U

#define UART2_CPR_AFCE_MODE_SHIFT                              4U
#define UART2_CPR_AFCE_MODE_WIDTH                              1U
#define UART2_CPR_AFCE_MODE_MASK                               (((1U << UART2_CPR_AFCE_MODE_WIDTH) - 1U) << UART2_CPR_AFCE_MODE_SHIFT)
#define UART2_CPR_GET_AFCE_MODE(v)                             (((v) & UART2_CPR_AFCE_MODE_MASK) >> UART2_CPR_AFCE_MODE_SHIFT)
#define UART2_CPR_SET_AFCE_MODE(v)                             (((v) << UART2_CPR_AFCE_MODE_SHIFT) & UART2_CPR_AFCE_MODE_MASK)
#define UART2_CPR_AFCE_MODE_VALUE_ENABLED                      0x1U
#define UART2_CPR_AFCE_MODE_VALUE_DISABLED                     0x0U

#define UART2_CPR_APB_DATA_WIDTH_SHIFT                         0U
#define UART2_CPR_APB_DATA_WIDTH_WIDTH                         2U
#define UART2_CPR_APB_DATA_WIDTH_MASK                          (((1U << UART2_CPR_APB_DATA_WIDTH_WIDTH) - 1U) << UART2_CPR_APB_DATA_WIDTH_SHIFT)
#define UART2_CPR_GET_APB_DATA_WIDTH(v)                        (((v) & UART2_CPR_APB_DATA_WIDTH_MASK) >> UART2_CPR_APB_DATA_WIDTH_SHIFT)
#define UART2_CPR_SET_APB_DATA_WIDTH(v)                        (((v) << UART2_CPR_APB_DATA_WIDTH_SHIFT) & UART2_CPR_APB_DATA_WIDTH_MASK)
#define UART2_CPR_APB_DATA_WIDTH_VALUE_32BIT                   0x2U

#define UART2_UCV_ADDR                                         (UART2_BASE + 0x00F8)
#define UART2_UCV                                              (*(volatile uint32_t *)UART2_UCV_ADDR)

#define UART2_CTR_ADDR                                         (UART2_BASE + 0x00FC)
#define UART2_CTR                                              (*(volatile uint32_t *)UART2_CTR_ADDR)
#endif

